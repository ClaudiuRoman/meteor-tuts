{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/meteor/source/fonts/percolate.eot","path":"fonts/percolate.eot","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.ttf","path":"fonts/percolate.ttf","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.woff","path":"fonts/percolate.woff","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/icon-white.svg","path":"images/icon-white.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/logo-coralspace-left.svg","path":"images/logo-coralspace-left.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/script/main.js","path":"script/main.js","modified":0,"renderable":1},{"_id":"themes/meteor/source/script/smooth-scroll.min.js","path":"script/smooth-scroll.min.js","modified":0,"renderable":1},{"_id":"themes/meteor/source/style/style.less","path":"style/style.less","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.svg","path":"fonts/percolate.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/meteor/.git","hash":"049265de896a0397e3c70e6313762e3c26f93523","modified":1474889374000},{"_id":"themes/meteor/_config.yaml","hash":"2bbc5bebc9a3102442c4d4b89d4ae0c829fd4e62","modified":1474889374000},{"_id":"source/index.md","hash":"8b81ed90a5826e88353ad95e7419949c460d5954","modified":1477552948981},{"_id":"source/commandline.md","hash":"0b329d957b5386c4280d372fcb876d29015ba01d","modified":1474889325000},{"_id":"themes/meteor/layout/layout.ejs","hash":"9c495eaef6bd651b5112cd99e2d98c1dc4fcf394","modified":1475835527000},{"_id":"themes/meteor/layout/page.ejs","hash":"55d520f94f170ebe7e3a144c1dc2a5edb32f5fe4","modified":1474889374000},{"_id":"source/api/accounts-multi.md","hash":"f86155b4d0ff6c8d9c3c5ad883c53eb6625c2b29","modified":1474889325000},{"_id":"source/api/accounts.md","hash":"2e04b2e0b51c4037d77aad2bbf6a5f82d3d922ec","modified":1474889325000},{"_id":"source/api/assets.md","hash":"23d669772ecc4ec8f1bd5d517bcd8a965fa78dbd","modified":1474889325000},{"_id":"source/api/blaze.md","hash":"d75884756afddfd2bc791c3e3384df73e71f70a9","modified":1474889325000},{"_id":"source/api/check.md","hash":"170d63a00796364506ee4397241062d2e276d454","modified":1474889325000},{"_id":"source/api/collections.md","hash":"1d715fc4a18cc8430248757fa37b14ce57b3730c","modified":1474889325000},{"_id":"source/api/connections.md","hash":"dd194f4c3b60bf51779e477580db9325a6dcaafb","modified":1474889325000},{"_id":"source/api/core.md","hash":"07aba32faf25ed16fc6442fa59ebaea2ececb16d","modified":1474889325000},{"_id":"source/api/ejson.md","hash":"626c38a1341ea12a3f957615e5200092b91963bf","modified":1474889325000},{"_id":"source/api/email.md","hash":"97a80f9b11f3c9d6bc7265201527d29bed77083f","modified":1474889325000},{"_id":"source/api/http.md","hash":"eb2a09d9f2d65120d688b47e42e1e06b4e153364","modified":1474889325000},{"_id":"source/api/methods.md","hash":"2a9c64efb7135baf43a9e88bc4fd06aa6040482d","modified":1474889325000},{"_id":"source/api/mobile-config.md","hash":"cc49bf8a8c411d91ca7f584e8761e7e3baeee5c9","modified":1474889325000},{"_id":"source/api/packagejs.md","hash":"2da4cb7c02733ed934172dd0ff6d66aafef79610","modified":1474889325000},{"_id":"source/api/pubsub.md","hash":"ebc3e8107cb22e75191bff600dfd36e43f12eab5","modified":1474889325000},{"_id":"source/api/passwords.md","hash":"d223dbc16d787843fdb10ef421d6f411b5bb1d79","modified":1474889325000},{"_id":"source/api/reactive-var.md","hash":"5eaff15aed6dfcfb87c12b0593a60e760d63e801","modified":1474889325000},{"_id":"source/api/session.md","hash":"de19fade87018a3a20a26d570feb8112d41daabe","modified":1474889325000},{"_id":"source/api/templates.md","hash":"149a1d828bd90b3b0e038d8a41b2ea5491751cb4","modified":1474889325000},{"_id":"source/api/timers.md","hash":"9ce32673bd46b7c61662ce708289a46237e6d4d4","modified":1474889325000},{"_id":"source/api/tracker.md","hash":"62b255f29d1201c116acc196ce6f76fb38abee25","modified":1474889325000},{"_id":"source/packages/accounts-ui.md","hash":"d39b2c6c7c31c45fa3f385d07f28ea9b1cb4431d","modified":1474889325000},{"_id":"source/packages/appcache.md","hash":"88d1f57aeb3c3b7ee3c54bf9a820d05ae644acaa","modified":1474889325000},{"_id":"source/packages/coffeescript.md","hash":"a00aceb918ea7d16331531960168af7795ed90ed","modified":1474889325000},{"_id":"source/packages/audit-argument-checks.md","hash":"14e35b60b49aff6bc6fd398f12e799e834289407","modified":1474889325000},{"_id":"source/packages/jquery.md","hash":"10866aa89a5a93b288342c00539e52922b6b6cc0","modified":1474889325000},{"_id":"source/packages/less.md","hash":"b4d4a20a5a96ffe17b7c5e4a72a1c79960730a2c","modified":1474889325000},{"_id":"source/packages/ecmascript.md","hash":"a000de71dc604eb453363540f8743b56feca7444","modified":1474889325000},{"_id":"source/packages/markdown.md","hash":"029caba5c4b521899f513d6eab2117ee4bbf1071","modified":1474889325000},{"_id":"source/packages/oauth-encryption.md","hash":"96d52e09c837cbb137752de21b749507f25d2820","modified":1474889325000},{"_id":"source/packages/modules.md","hash":"3c169bea0e926cdd28e2d2b040bae07de1d2ae53","modified":1474889325000},{"_id":"source/packages/random.md","hash":"b689a94ec85207d1fa7950a23294298bb0843680","modified":1474889325000},{"_id":"source/packages/spacebars.md","hash":"13454fe7dc69f4f741775fae978307151d8a8c2e","modified":1474889325000},{"_id":"source/packages/underscore.md","hash":"6d3cc369754de4d2b341032cd28bb8523aaebe92","modified":1474889325000},{"_id":"source/packages/webapp.md","hash":"8071b9ee8705fb99a8f236e2de3bf9ac2350d503","modified":1474889325000},{"_id":"themes/meteor/source/fonts/percolate.eot","hash":"9f46f6ed3453808cb206b5b8c7c399f8c7c50b4b","modified":1474889374000},{"_id":"themes/meteor/source/fonts/percolate.ttf","hash":"ae93904a100e0c875bb382cb88709de4cd8b6a37","modified":1474889374000},{"_id":"themes/meteor/source/fonts/percolate.woff","hash":"f475ff4ac3d777c8d56bc7040d6f8576b86398a5","modified":1474889374000},{"_id":"themes/meteor/source/images/favicon.png","hash":"c019ad5135fb00e9d5a8a000a7162f4876cf583b","modified":1474889374000},{"_id":"themes/meteor/source/images/icon-white.svg","hash":"037afdf5842532cdc696bd93541be8a273ddf9dc","modified":1474889374000},{"_id":"themes/meteor/source/images/logo-coralspace-left.svg","hash":"ce3fa809cc5498c23597f68fc7f94d72f0deb453","modified":1474889374000},{"_id":"themes/meteor/source/script/main.js","hash":"aa6f1d81ab38e3d8e0dbdef9a574d2330f8ff5a4","modified":1474889374000},{"_id":"themes/meteor/source/script/smooth-scroll.min.js","hash":"c80cccc6c68f32b348b3d8459eb89686871b2e38","modified":1474889374000},{"_id":"themes/meteor/source/style/style.less","hash":"6517fbcd0c75aeb1bd4fc6f0c9a834fcef9a77e1","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-help.ejs","hash":"03fcaff5811b72920c87fa9154ffc4853b30b8de","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-guide.ejs","hash":"f490bb8fd8e5abd0e71c97c92a335a0802e329e1","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-compass.ejs","hash":"8072852c211ea881b8facccbe00d975b2507d990","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-logs.ejs","hash":"47638a8a92ab5e5a7a143e1588ca9baaec371f9d","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/panel.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-support.ejs","hash":"4ac49bda616e8046bd4175fbb6e891dfcab658c0","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-github.ejs","hash":"ad171cc4d41acf187831c415cb1928d5ef7a1142","modified":1474889374000},{"_id":"themes/meteor/layout/partials/sidebar.ejs","hash":"79da12f6380c353d6efaa6c35406bedafb0717ab","modified":1477476792300},{"_id":"themes/meteor/source/fonts/percolate.svg","hash":"b7c6df677a47fd66316ce90839550bfad6fd462f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Checkbox.less","hash":"9971b489264f4b37fb901cd8417accba7becf270","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Input.less","hash":"5be8dadb507ff338ae7cea539cae535b7779334c","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Textarea.less","hash":"4c6089bb5f41dde32d1828d6d27a0899f8e3c8cf","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Select.less","hash":"9065734a36e52c8ce2830d403da3852eebe3590c","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Radio.less","hash":"ecc255428e2883b49d074648a290de07b7a9d4d5","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/animation.less","hash":"2c01fa20c282b133dda12a852fb61baba0c0af82","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/base.less","hash":"0fce53b3187d99296dedd0fcd90887a4b336ad83","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/button.less","hash":"d76568349602485c2ec7d0d3380091c4a5e8e2ca","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/form.less","hash":"dcb4320c34011659a1e2974a7ae5b28b444cc519","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/docsearch.less","hash":"26a087b4b6748822b7323584ba8dc375c7462641","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/formatting.less","hash":"91dee3476627cff618a987a9122e5a21d8f3e5c0","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/icon.less","hash":"b6f93082065f57b48185c6fcbffafe5dfc98c86f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/mobile.less","hash":"d4f28dae69f89ce6e9646774ce6d07d6f677c683","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/link.less","hash":"a80547ffbacd58422e7095aadbbd73ba0c650e31","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/nav.less","hash":"e3eb2ec6e2245f6b4d40589c104618f9ed69f37f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/syntax.less","hash":"ff408a13d195a50b3310cdbf5ca31961393e7983","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/layout.less","hash":"655fcc41ad239d5a219aabc4c79c0ac970b6c8bd","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/panel.less","hash":"9438a41518ecdaa01d64ae65317ff6e27b03720d","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/nav.less","hash":"a558ca89e296a7e94d3a29e998aa119c877c065e","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/content.less","hash":"c90d7765335d1ee1eca5726ada84d7cb35a61745","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/sidebar.less","hash":"5fe1fb4c64bcf10d8bfe0caf63d2f969ed206a6c","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/clearfix.import.less","hash":"8dd7f85394fc6e232cad232ea54e605a06be002e","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/color.import.less","hash":"5c88b7bc663df13316e3748f8516f4324f603bd2","modified":1477889942561},{"_id":"themes/meteor/source/style/_util/easing.import.less","hash":"69523005d6afbd184cfa91d629cf1a931ebf8fd1","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/helper.import.less","hash":"7baf147d5c4bac8c5ef4b2690af3b185b4df56d2","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/link.import.less","hash":"a6856c0b5017b7bb688d7a2cf2d5f3bd682df6fe","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/normalize.import.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/index.import.less","hash":"2a38f287116d66f9848229b59d03464b4f9b18b9","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/scrollbar.import.less","hash":"1a45d8862fafd8d62f4e2562278a88ed3008ac32","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/lesshat.import.less","hash":"491b7bc1426fb35bf17c28418aadab66b480b5e0","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/text.import.less","hash":"3c1b4559dd5cf7b6b37a42ab8b7ebd9e40e2eee9","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/ui.import.less","hash":"b577e1c8092b87f10baef86c0f9d30125b2cdf94","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/typography.import.less","hash":"c8deee0f5ad8b529eeb097d90ef7a3f2f91441f6","modified":1474889374000},{"_id":"source/guide/exposure.md","hash":"6893c7b267318a295ab6b0e9217321b57570cff9","modified":1477242714256},{"_id":"source/guide/links.md","hash":"25c0c110477f71369760a06b5e4e0ced17f884e7","modified":1477238465174},{"_id":"source/guide/query.md","hash":"2778f710129d12fe1fb312bc0a3e4105d5a8e770","modified":1477242714252},{"_id":"source/api/collectionLinks.md","hash":"56d88ef0790046a8072cff0aace7eab16df4057b","modified":1474904935000},{"_id":"source/old_api/accounts-multi.md","hash":"f86155b4d0ff6c8d9c3c5ad883c53eb6625c2b29","modified":1474889325000},{"_id":"source/old_api/accounts.md","hash":"2e04b2e0b51c4037d77aad2bbf6a5f82d3d922ec","modified":1474889325000},{"_id":"source/old_api/assets.md","hash":"23d669772ecc4ec8f1bd5d517bcd8a965fa78dbd","modified":1474889325000},{"_id":"source/old_api/blaze.md","hash":"d75884756afddfd2bc791c3e3384df73e71f70a9","modified":1474889325000},{"_id":"source/old_api/check.md","hash":"170d63a00796364506ee4397241062d2e276d454","modified":1474889325000},{"_id":"source/old_api/collections.md","hash":"1d715fc4a18cc8430248757fa37b14ce57b3730c","modified":1474889325000},{"_id":"source/old_api/connections.md","hash":"dd194f4c3b60bf51779e477580db9325a6dcaafb","modified":1474889325000},{"_id":"source/old_api/core.md","hash":"07aba32faf25ed16fc6442fa59ebaea2ececb16d","modified":1474889325000},{"_id":"source/old_api/ejson.md","hash":"626c38a1341ea12a3f957615e5200092b91963bf","modified":1474889325000},{"_id":"source/old_api/email.md","hash":"97a80f9b11f3c9d6bc7265201527d29bed77083f","modified":1474889325000},{"_id":"source/old_api/http.md","hash":"eb2a09d9f2d65120d688b47e42e1e06b4e153364","modified":1474889325000},{"_id":"source/old_api/methods.md","hash":"2a9c64efb7135baf43a9e88bc4fd06aa6040482d","modified":1474889325000},{"_id":"source/old_api/mobile-config.md","hash":"cc49bf8a8c411d91ca7f584e8761e7e3baeee5c9","modified":1474889325000},{"_id":"source/old_api/packagejs.md","hash":"2da4cb7c02733ed934172dd0ff6d66aafef79610","modified":1474889325000},{"_id":"source/old_api/passwords.md","hash":"d223dbc16d787843fdb10ef421d6f411b5bb1d79","modified":1474889325000},{"_id":"source/old_api/pubsub.md","hash":"ebc3e8107cb22e75191bff600dfd36e43f12eab5","modified":1474889325000},{"_id":"source/old_api/reactive-var.md","hash":"5eaff15aed6dfcfb87c12b0593a60e760d63e801","modified":1474889325000},{"_id":"source/old_api/session.md","hash":"de19fade87018a3a20a26d570feb8112d41daabe","modified":1474889325000},{"_id":"source/old_api/templates.md","hash":"149a1d828bd90b3b0e038d8a41b2ea5491751cb4","modified":1474889325000},{"_id":"source/old_api/timers.md","hash":"9ce32673bd46b7c61662ce708289a46237e6d4d4","modified":1474889325000},{"_id":"source/old_api/tracker.md","hash":"62b255f29d1201c116acc196ce6f76fb38abee25","modified":1474889325000},{"_id":"source/api/collection.md","hash":"56d88ef0790046a8072cff0aace7eab16df4057b","modified":1474904935000},{"_id":"source/links/intro.md","hash":"22563ced472e63aac548720e73c40ab9afdc822b","modified":1474944651000},{"_id":"source/links/addLinks.md","hash":"fb9ff624d61dd6f7c3a801dc9efaafb726e768cf","modified":1474945427000},{"_id":"themes/meteor/source/images/logo.png","hash":"77000ddb64c4ce7c6052165396c095bf56db02df","modified":1477889765000},{"_id":"source/api/reference.md","hash":"c9d62f4f296cda47e8d7fe9c867589cb8db8504d","modified":1476081598852},{"_id":"source/packages/boilerplate.md","hash":"b79d5a279c49629ffec2fae5830d8832e0474061","modified":1476277449040},{"_id":"source/packages/live.md","hash":"1a1e31abcc882e2c4ab4f88051b93828f398da46","modified":1476244662000},{"_id":"source/guide/namedQuery.md","hash":"fb9b64e1178aa6634dd1e1b0fa27367c95a7db64","modified":1476888260769},{"_id":"public/packages/boilerplate.html","hash":"665174f7e1b4feff6855a21d0d55bb44ab33a07a","modified":1476888401514},{"_id":"public/packages/live.html","hash":"0a2e82ff9a2cd1a265b719c224b5d356e8ef51f7","modified":1476888401515},{"_id":"public/index.html","hash":"9ee58f6b8095469af926b75978aa1f55b24a4a91","modified":1477242743324},{"_id":"public/guide/links.html","hash":"c5f969dbf38c8e880c0f298a26d5de4af725a25c","modified":1477242743358},{"_id":"public/guide/query.html","hash":"44cc7663225cd95a1074e35998c6e3f072f7b7a8","modified":1477242743358},{"_id":"public/api/reference.html","hash":"5804cc3431b97d6f22e75bdcaf78a97a7f1ce98c","modified":1476085992422},{"_id":"public/guide/exposure.html","hash":"8b234e6ae9c612847fd356e09c78d9a8a4d44bb8","modified":1477242743358},{"_id":"public/guide/namedQuery.html","hash":"18e7c7262deab6642396e1162075d13afaa43464","modified":1476888401516},{"_id":"source/api/exposure.md","hash":"b5ec5e9db871bb693b9e25ab6cf5d59ad0702b54","modified":1476888279565},{"_id":"source/api/namedQuery.md","hash":"eda9a78bc73477331f156a28948402034f259e07","modified":1476245109000},{"_id":"source/api/links.md","hash":"4933e81d277eb4f400180ee17100d0c1dfd8e5d5","modified":1476245463000},{"_id":"source/api/query.md","hash":"70ad66dd1db063ce9788d30386c00b8618adcb8f","modified":1477238135558},{"_id":"public/api/exposure.html","hash":"7bb3d6eb402621c8175d21560f69fbbfb0b870bf","modified":1476888401516},{"_id":"public/api/namedQuery.html","hash":"307f9da138f1b2e7f72b5bee136e74017b0c3da7","modified":1476888401516},{"_id":"public/api/links.html","hash":"603498b87891bb87385fdd492fee5b189d8d865b","modified":1476888401516},{"_id":"public/api/query.html","hash":"1e98a577a8bc9afb73a3ee2c15e4b359557890d2","modified":1477242743359},{"_id":"source/gettingStarted.md","hash":"7199eaf4f890d3f93a33aa637eb36176d62d7743","modified":1477475995711},{"_id":"source/chapters/1/intro.md","hash":"12bdac4bdc2a8390d0aa3e184a00b04d92f35656","modified":1477554692579},{"_id":"source/chapters/1/collections.md","hash":"6a3ead2d4e362abcd9d4c9f56dd0ce1a1cf964e0","modified":1477553111846},{"_id":"source/chapters/1/methods.md","hash":"1fc20b29f6de0c2c6641ee81c5a29de445feda3a","modified":1477554692575},{"_id":"source/chapters/1/pubsub.md","hash":"9522cfdfe15e1cdb5ef6c5a315543d53f77c0e58","modified":1477724628869},{"_id":"source/chapters/1/reactivity.md","hash":"af3603b491d12e095ed31739d1d30bc0ce5690a6","modified":1477583828166},{"_id":"source/chapters/1/users.md","hash":"cea3b5a97aa65c1d2356b45dd4e2ff79cb1b44eb","modified":1477583743009},{"_id":"source/chapters/1/security.md","hash":"8b2df742101de3b71f2684d72dd1f80905808006","modified":1477888445682},{"_id":"source/chapters/1/meteorSnacks.md","hash":"ab5e03b245491c085bc6a9fe978c1e85fa10ec8f","modified":1477888860508}],"Category":[],"Data":[],"Page":[{"title":"Introduction","description":"Getting started with Grapher","_content":"\nWe assume that you have read the \"Guide\" fully so you have an idea of what Grapher has to offer. \n\nSo, you want to get it up & running, huh ?\n\n","source":"gettingStarted.md","raw":"---\ntitle: Introduction\ndescription: Getting started with Grapher\n---\n\nWe assume that you have read the \"Guide\" fully so you have an idea of what Grapher has to offer. \n\nSo, you want to get it up & running, huh ?\n\n","date":"2016-10-26T09:59:55.711Z","updated":"2016-10-26T09:59:55.711Z","path":"gettingStarted.html","comments":1,"layout":"page","_id":"ciuqri0ot0000ufjxpgj2kalv","content":"<p>We assume that you have read the “Guide” fully so you have an idea of what Grapher has to offer. </p>\n<p>So, you want to get it up &amp; running, huh ?</p>\n","excerpt":"","more":"<p>We assume that you have read the “Guide” fully so you have an idea of what Grapher has to offer. </p>\n<p>So, you want to get it up &amp; running, huh ?</p>\n"},{"title":"Intro","description":"Getting started with Meteor","_content":"\nSo you want to begin learning Meteor huh ?\n\nYou think you got what it takes ?\n\nYou think you are ready to learn the most beautiful and elegant JS Framework ?\n\n<strong style=\"font-size: 2em\">Yes, I am ready.</strong>\n\nCool, let's begin our journey.\n\n## Installing\n\nhttps://www.meteor.com/install\n\n```\nmeteor run\n```\n\nThat's it. This is how easy it is to get up and running with Meteor.\n\n## Resources\n\n[Meteor Guide](https://guide.meteor.com) contains recipes for a lot of stuff, don't dive directly into it, it requires you to know a bit about how Meteor works\n\n[Meteor Docs](https://guide.meteor.com) describes the API and functionalities of the modules offered by Meteor\n\n## Folder Structure\n\nThis is the default folder structure that we will use.\n\n<pre>\n├── client \n│   └── main.js // this file contains \"import /imports/startup/client\"\n├── imports\n│   ├── ui // contains anything User-Interface related\n│   ├── startup\n│   │   ├── client\n│   │   │   └── index.js // loads everything that is needed for the client to function\n│   │   └── server\n│   │       └── index.js // loads everything that is needed for the server to function\n│   ├── api // contains the rest\n└── server \n    └── main.js // this file contains \"import /imports/startup/server\"\n</pre>\n\nEverything in \"/imports\" must be explicitly imported so Meteor can know about it.\nThe advantage of this is that it offers the ability to build modular applications.\n\nEverything in \"/client\" and \"/server\" is eagerly loaded (automatically loaded) [Read more](https://guide.meteor.com/structure.html#load-order) \n\nPretty straight forward right ?\n\nLet's move forward.\n\n## Importing from NPM\n\nFor now, we won't get into much details, but the idea is that with Meteor you have access to the full NPM ecosystem, allowing you to import\nmodules from http://www.npmjs.com\n\n```\n// moment is a library you will most likely use in order to manipulate dates however you want\nmeteor npm install --save moment\n```\n\nUse it:\n```\nimport moment from 'moment';\n\nmoment(new Date()).format('YYYY-MM-DD')\n```\n\n## Importing from Atmosphere\n\nYou can access it on: https://atmospherejs.com\n\nAtmosphere is for Meteor only packages. You can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.\nThe sky is the limit.\n\nAdding a package is as simple as:\nhttps://atmospherejs.com/twbs/bootstrap\n\n```\nmeteor add twbs:bootstrap\n```\n\nThat's it. You now have bootstrap in your application loaded. There are many cool packages out there that we'll explore during these tutorials.\n\nOk. Let's dive into more details now.\n\nYou can use the modular approach with Meteor package also:\n\n```\n// in your console\nmeteor add aldeed:simple-schema\n```\n```\n// in any file\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\n// use SimpleSchema object\n```\n\nIf the package exports the objects, you will be able to access them by importing from the package, but prefixing it with \"meteor/\".\n\n## Importing from local files\n\nAs you saw in the example for Folder Structure, we have the ability to import from local files by using an \"absolute path\"\n```\nimport X from /imports/something.js\n```\n\n```\n// relative path\n// given you have two files: /imports/api/X.js and /imports/api/Y.js\n// in Y.js file you can do:\nimport X from './X.js'\n// but you could also do\nimport X from '/imports/api/X.js'\n// or you can use \"..\" to specify the previous folder like:\nimport X from '../api/X.js'\n\n// you can even omit the \".js\" part\nimport X from './X';\n\n// if you have a folder that contains \"index.js\", by importing the folder you will actually import \"index.js\" from that folder\nimport Z from './Z';\n// if Z is a file (Z.js) it will import it, if Z is a folder it will try to import Z/index.js\n```\n\nPretty easy right ?\n\nFind out more about exports and imports:\n- http://exploringjs.com/es6/ch_modules.html\n- https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087\n\nWe believe that is critical for you to understand how we define our \"requirements\" in a file, because this will be used very often.\n\nSide note: For meteor packages, you don't actually have to import them, because they are pseudo-globals, which means, you can use what the package exports\nas a global variable. For the example above with simple-schema we could easily have in a file:\n\n```\n// no importing SimpleSchema\nnew SimpleSchema(config);\n```\n\nHowever, it is not recommended, because if you use a code-linter (a thingie that will check your code syntax and what you use) it will burst out with failures,\nbecause it found no reference to SimpleSchema, because you do not imported. Hard-core programmers are against globals, and for a good reason.\n\nMeteor comes packed with MongoDB, Node, Npm, so you don't have to worry about any dependencies.\n\n## Homework\n\n\n\n","source":"chapters/1/intro.md","raw":"---\ntitle: Intro\ndescription: Getting started with Meteor\n---\n\nSo you want to begin learning Meteor huh ?\n\nYou think you got what it takes ?\n\nYou think you are ready to learn the most beautiful and elegant JS Framework ?\n\n<strong style=\"font-size: 2em\">Yes, I am ready.</strong>\n\nCool, let's begin our journey.\n\n## Installing\n\nhttps://www.meteor.com/install\n\n```\nmeteor run\n```\n\nThat's it. This is how easy it is to get up and running with Meteor.\n\n## Resources\n\n[Meteor Guide](https://guide.meteor.com) contains recipes for a lot of stuff, don't dive directly into it, it requires you to know a bit about how Meteor works\n\n[Meteor Docs](https://guide.meteor.com) describes the API and functionalities of the modules offered by Meteor\n\n## Folder Structure\n\nThis is the default folder structure that we will use.\n\n<pre>\n├── client \n│   └── main.js // this file contains \"import /imports/startup/client\"\n├── imports\n│   ├── ui // contains anything User-Interface related\n│   ├── startup\n│   │   ├── client\n│   │   │   └── index.js // loads everything that is needed for the client to function\n│   │   └── server\n│   │       └── index.js // loads everything that is needed for the server to function\n│   ├── api // contains the rest\n└── server \n    └── main.js // this file contains \"import /imports/startup/server\"\n</pre>\n\nEverything in \"/imports\" must be explicitly imported so Meteor can know about it.\nThe advantage of this is that it offers the ability to build modular applications.\n\nEverything in \"/client\" and \"/server\" is eagerly loaded (automatically loaded) [Read more](https://guide.meteor.com/structure.html#load-order) \n\nPretty straight forward right ?\n\nLet's move forward.\n\n## Importing from NPM\n\nFor now, we won't get into much details, but the idea is that with Meteor you have access to the full NPM ecosystem, allowing you to import\nmodules from http://www.npmjs.com\n\n```\n// moment is a library you will most likely use in order to manipulate dates however you want\nmeteor npm install --save moment\n```\n\nUse it:\n```\nimport moment from 'moment';\n\nmoment(new Date()).format('YYYY-MM-DD')\n```\n\n## Importing from Atmosphere\n\nYou can access it on: https://atmospherejs.com\n\nAtmosphere is for Meteor only packages. You can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.\nThe sky is the limit.\n\nAdding a package is as simple as:\nhttps://atmospherejs.com/twbs/bootstrap\n\n```\nmeteor add twbs:bootstrap\n```\n\nThat's it. You now have bootstrap in your application loaded. There are many cool packages out there that we'll explore during these tutorials.\n\nOk. Let's dive into more details now.\n\nYou can use the modular approach with Meteor package also:\n\n```\n// in your console\nmeteor add aldeed:simple-schema\n```\n```\n// in any file\nimport { SimpleSchema } from 'meteor/aldeed:simple-schema';\n\n// use SimpleSchema object\n```\n\nIf the package exports the objects, you will be able to access them by importing from the package, but prefixing it with \"meteor/\".\n\n## Importing from local files\n\nAs you saw in the example for Folder Structure, we have the ability to import from local files by using an \"absolute path\"\n```\nimport X from /imports/something.js\n```\n\n```\n// relative path\n// given you have two files: /imports/api/X.js and /imports/api/Y.js\n// in Y.js file you can do:\nimport X from './X.js'\n// but you could also do\nimport X from '/imports/api/X.js'\n// or you can use \"..\" to specify the previous folder like:\nimport X from '../api/X.js'\n\n// you can even omit the \".js\" part\nimport X from './X';\n\n// if you have a folder that contains \"index.js\", by importing the folder you will actually import \"index.js\" from that folder\nimport Z from './Z';\n// if Z is a file (Z.js) it will import it, if Z is a folder it will try to import Z/index.js\n```\n\nPretty easy right ?\n\nFind out more about exports and imports:\n- http://exploringjs.com/es6/ch_modules.html\n- https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087\n\nWe believe that is critical for you to understand how we define our \"requirements\" in a file, because this will be used very often.\n\nSide note: For meteor packages, you don't actually have to import them, because they are pseudo-globals, which means, you can use what the package exports\nas a global variable. For the example above with simple-schema we could easily have in a file:\n\n```\n// no importing SimpleSchema\nnew SimpleSchema(config);\n```\n\nHowever, it is not recommended, because if you use a code-linter (a thingie that will check your code syntax and what you use) it will burst out with failures,\nbecause it found no reference to SimpleSchema, because you do not imported. Hard-core programmers are against globals, and for a good reason.\n\nMeteor comes packed with MongoDB, Node, Npm, so you don't have to worry about any dependencies.\n\n## Homework\n\n\n\n","date":"2016-10-27T07:51:32.579Z","updated":"2016-10-27T07:51:32.579Z","path":"chapters/1/intro.html","_id":"ciuqri0q20001ufjxcqpoqtlv","comments":1,"layout":"page","content":"<p>So you want to begin learning Meteor huh ?</p>\n<p>You think you got what it takes ?</p>\n<p>You think you are ready to learn the most beautiful and elegant JS Framework ?</p>\n<p><strong style=\"font-size: 2em\">Yes, I am ready.</strong></p>\n<p>Cool, let’s begin our journey.</p>\n<h2 id=\"Installing\"><a href=\"#Installing\" class=\"headerlink\" title=\"Installing\"></a>Installing</h2><p><a href=\"https://www.meteor.com/install\" target=\"_blank\" rel=\"external\">https://www.meteor.com/install</a></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n<p>That’s it. This is how easy it is to get up and running with Meteor.</p>\n<h2 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h2><p><a href=\"https://guide.meteor.com\" target=\"_blank\" rel=\"external\">Meteor Guide</a> contains recipes for a lot of stuff, don’t dive directly into it, it requires you to know a bit about how Meteor works</p>\n<p><a href=\"https://guide.meteor.com\" target=\"_blank\" rel=\"external\">Meteor Docs</a> describes the API and functionalities of the modules offered by Meteor</p>\n<h2 id=\"Folder-Structure\"><a href=\"#Folder-Structure\" class=\"headerlink\" title=\"Folder Structure\"></a>Folder Structure</h2><p>This is the default folder structure that we will use.</p>\n<pre>\n├── client \n│   └── main.js // this file contains \"import /imports/startup/client\"\n├── imports\n│   ├── ui // contains anything User-Interface related\n│   ├── startup\n│   │   ├── client\n│   │   │   └── index.js // loads everything that is needed for the client to function\n│   │   └── server\n│   │       └── index.js // loads everything that is needed for the server to function\n│   ├── api // contains the rest\n└── server \n    └── main.js // this file contains \"import /imports/startup/server\"\n</pre>\n\n<p>Everything in “/imports” must be explicitly imported so Meteor can know about it.\nThe advantage of this is that it offers the ability to build modular applications.</p>\n<p>Everything in “/client” and “/server” is eagerly loaded (automatically loaded) <a href=\"https://guide.meteor.com/structure.html#load-order\" target=\"_blank\" rel=\"external\">Read more</a> </p>\n<p>Pretty straight forward right ?</p>\n<p>Let’s move forward.</p>\n<h2 id=\"Importing-from-NPM\"><a href=\"#Importing-from-NPM\" class=\"headerlink\" title=\"Importing from NPM\"></a>Importing from NPM</h2><p>For now, we won’t get into much details, but the idea is that with Meteor you have access to the full NPM ecosystem, allowing you to import\nmodules from <a href=\"http://www.npmjs.com\" target=\"_blank\" rel=\"external\">http://www.npmjs.com</a></p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// moment is a library you will most likely use in order to manipulate dates however you want</span></div><div class=\"line\">meteor npm install --<span class=\"keyword\">save</span> <span class=\"built_in\">moment</span></div></pre></td></tr></table></figure>\n<p>Use it:\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import <span class=\"built_in\">moment</span> from '<span class=\"built_in\">moment</span>';</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">moment</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).<span class=\"keyword\">format</span>('YYYY-MM-DD')</div></pre></td></tr></table></figure></p>\n<h2 id=\"Importing-from-Atmosphere\"><a href=\"#Importing-from-Atmosphere\" class=\"headerlink\" title=\"Importing from Atmosphere\"></a>Importing from Atmosphere</h2><p>You can access it on: <a href=\"https://atmospherejs.com\" target=\"_blank\" rel=\"external\">https://atmospherejs.com</a></p>\n<p>Atmosphere is for Meteor only packages. You can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.\nThe sky is the limit.</p>\n<p>Adding a package is as simple as:\n<a href=\"https://atmospherejs.com/twbs/bootstrap\" target=\"_blank\" rel=\"external\">https://atmospherejs.com/twbs/bootstrap</a></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> twbs:bootstrap</span></div></pre></td></tr></table></figure>\n<p>That’s it. You now have bootstrap in your application loaded. There are many cool packages out there that we’ll explore during these tutorials.</p>\n<p>Ok. Let’s dive into more details now.</p>\n<p>You can use the modular approach with Meteor package also:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your console</span></div><div class=\"line\">meteor <span class=\"keyword\">add</span> aldeed:simple-schema</div></pre></td></tr></table></figure>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"keyword\">in</span> <span class=\"built_in\">any</span> <span class=\"keyword\">file</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; SimpleSchema &#125; from <span class=\"string\">'meteor/aldeed:simple-schema'</span>;</div><div class=\"line\"></div><div class=\"line\">// <span class=\"keyword\">use</span> SimpleSchema object</div></pre></td></tr></table></figure>\n<p>If the package exports the objects, you will be able to access them by importing from the package, but prefixing it with “meteor/“.</p>\n<h2 id=\"Importing-from-local-files\"><a href=\"#Importing-from-local-files\" class=\"headerlink\" title=\"Importing from local files\"></a>Importing from local files</h2><p>As you saw in the example for Folder Structure, we have the ability to import from local files by using an “absolute path”\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"regexp\">/imports/</span>something.js</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// relative path</span></div><div class=\"line\"><span class=\"comment\">// given you have two files: /imports/api/X.js and /imports/api/Y.js</span></div><div class=\"line\"><span class=\"comment\">// in Y.js file you can do:</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'./X.js'</span></div><div class=\"line\"><span class=\"comment\">// but you could also do</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/X.js'</span></div><div class=\"line\"><span class=\"comment\">// or you can use \"..\" to specify the previous folder like:</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'../api/X.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// you can even omit the \".js\" part</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'./X'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if you have a folder that contains \"index.js\", by importing the folder you will actually import \"index.js\" from that folder</span></div><div class=\"line\"><span class=\"keyword\">import</span> Z <span class=\"keyword\">from</span> <span class=\"string\">'./Z'</span>;</div><div class=\"line\"><span class=\"comment\">// if Z is a file (Z.js) it will import it, if Z is a folder it will try to import Z/index.js</span></div></pre></td></tr></table></figure>\n<p>Pretty easy right ?</p>\n<p>Find out more about exports and imports:</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"external\">http://exploringjs.com/es6/ch_modules.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087\" target=\"_blank\" rel=\"external\">https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087</a></li>\n</ul>\n<p>We believe that is critical for you to understand how we define our “requirements” in a file, because this will be used very often.</p>\n<p>Side note: For meteor packages, you don’t actually have to import them, because they are pseudo-globals, which means, you can use what the package exports\nas a global variable. For the example above with simple-schema we could easily have in a file:</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// no importing SimpleSchema</span></div><div class=\"line\"><span class=\"keyword\">new</span> SimpleSchema(<span class=\"built_in\">config</span>);</div></pre></td></tr></table></figure>\n<p>However, it is not recommended, because if you use a code-linter (a thingie that will check your code syntax and what you use) it will burst out with failures,\nbecause it found no reference to SimpleSchema, because you do not imported. Hard-core programmers are against globals, and for a good reason.</p>\n<p>Meteor comes packed with MongoDB, Node, Npm, so you don’t have to worry about any dependencies.</p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2>","excerpt":"","more":"<p>So you want to begin learning Meteor huh ?</p>\n<p>You think you got what it takes ?</p>\n<p>You think you are ready to learn the most beautiful and elegant JS Framework ?</p>\n<p><strong style=\"font-size: 2em\">Yes, I am ready.</strong></p>\n<p>Cool, let’s begin our journey.</p>\n<h2 id=\"Installing\"><a href=\"#Installing\" class=\"headerlink\" title=\"Installing\"></a>Installing</h2><p><a href=\"https://www.meteor.com/install\">https://www.meteor.com/install</a></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n<p>That’s it. This is how easy it is to get up and running with Meteor.</p>\n<h2 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h2><p><a href=\"https://guide.meteor.com\">Meteor Guide</a> contains recipes for a lot of stuff, don’t dive directly into it, it requires you to know a bit about how Meteor works</p>\n<p><a href=\"https://guide.meteor.com\">Meteor Docs</a> describes the API and functionalities of the modules offered by Meteor</p>\n<h2 id=\"Folder-Structure\"><a href=\"#Folder-Structure\" class=\"headerlink\" title=\"Folder Structure\"></a>Folder Structure</h2><p>This is the default folder structure that we will use.</p>\n<pre>\n├── client \n│   └── main.js // this file contains \"import /imports/startup/client\"\n├── imports\n│   ├── ui // contains anything User-Interface related\n│   ├── startup\n│   │   ├── client\n│   │   │   └── index.js // loads everything that is needed for the client to function\n│   │   └── server\n│   │       └── index.js // loads everything that is needed for the server to function\n│   ├── api // contains the rest\n└── server \n    └── main.js // this file contains \"import /imports/startup/server\"\n</pre>\n\n<p>Everything in “/imports” must be explicitly imported so Meteor can know about it.\nThe advantage of this is that it offers the ability to build modular applications.</p>\n<p>Everything in “/client” and “/server” is eagerly loaded (automatically loaded) <a href=\"https://guide.meteor.com/structure.html#load-order\">Read more</a> </p>\n<p>Pretty straight forward right ?</p>\n<p>Let’s move forward.</p>\n<h2 id=\"Importing-from-NPM\"><a href=\"#Importing-from-NPM\" class=\"headerlink\" title=\"Importing from NPM\"></a>Importing from NPM</h2><p>For now, we won’t get into much details, but the idea is that with Meteor you have access to the full NPM ecosystem, allowing you to import\nmodules from <a href=\"http://www.npmjs.com\">http://www.npmjs.com</a></p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// moment is a library you will most likely use in order to manipulate dates however you want</span></div><div class=\"line\">meteor npm install --<span class=\"keyword\">save</span> <span class=\"built_in\">moment</span></div></pre></td></tr></table></figure>\n<p>Use it:\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">import <span class=\"built_in\">moment</span> from '<span class=\"built_in\">moment</span>';</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">moment</span>(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).<span class=\"keyword\">format</span>('YYYY-MM-DD')</div></pre></td></tr></table></figure></p>\n<h2 id=\"Importing-from-Atmosphere\"><a href=\"#Importing-from-Atmosphere\" class=\"headerlink\" title=\"Importing from Atmosphere\"></a>Importing from Atmosphere</h2><p>You can access it on: <a href=\"https://atmospherejs.com\">https://atmospherejs.com</a></p>\n<p>Atmosphere is for Meteor only packages. You can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.\nThe sky is the limit.</p>\n<p>Adding a package is as simple as:\n<a href=\"https://atmospherejs.com/twbs/bootstrap\">https://atmospherejs.com/twbs/bootstrap</a></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> twbs:bootstrap</span></div></pre></td></tr></table></figure>\n<p>That’s it. You now have bootstrap in your application loaded. There are many cool packages out there that we’ll explore during these tutorials.</p>\n<p>Ok. Let’s dive into more details now.</p>\n<p>You can use the modular approach with Meteor package also:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your console</span></div><div class=\"line\">meteor <span class=\"keyword\">add</span> aldeed:simple-schema</div></pre></td></tr></table></figure>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// <span class=\"keyword\">in</span> <span class=\"built_in\">any</span> <span class=\"keyword\">file</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; SimpleSchema &#125; from <span class=\"string\">'meteor/aldeed:simple-schema'</span>;</div><div class=\"line\"></div><div class=\"line\">// <span class=\"keyword\">use</span> SimpleSchema object</div></pre></td></tr></table></figure>\n<p>If the package exports the objects, you will be able to access them by importing from the package, but prefixing it with “meteor/“.</p>\n<h2 id=\"Importing-from-local-files\"><a href=\"#Importing-from-local-files\" class=\"headerlink\" title=\"Importing from local files\"></a>Importing from local files</h2><p>As you saw in the example for Folder Structure, we have the ability to import from local files by using an “absolute path”\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"regexp\">/imports/</span>something.js</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// relative path</span></div><div class=\"line\"><span class=\"comment\">// given you have two files: /imports/api/X.js and /imports/api/Y.js</span></div><div class=\"line\"><span class=\"comment\">// in Y.js file you can do:</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'./X.js'</span></div><div class=\"line\"><span class=\"comment\">// but you could also do</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/X.js'</span></div><div class=\"line\"><span class=\"comment\">// or you can use \"..\" to specify the previous folder like:</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'../api/X.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// you can even omit the \".js\" part</span></div><div class=\"line\"><span class=\"keyword\">import</span> X <span class=\"keyword\">from</span> <span class=\"string\">'./X'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// if you have a folder that contains \"index.js\", by importing the folder you will actually import \"index.js\" from that folder</span></div><div class=\"line\"><span class=\"keyword\">import</span> Z <span class=\"keyword\">from</span> <span class=\"string\">'./Z'</span>;</div><div class=\"line\"><span class=\"comment\">// if Z is a file (Z.js) it will import it, if Z is a folder it will try to import Z/index.js</span></div></pre></td></tr></table></figure>\n<p>Pretty easy right ?</p>\n<p>Find out more about exports and imports:</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\">http://exploringjs.com/es6/ch_modules.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087\">https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087</a></li>\n</ul>\n<p>We believe that is critical for you to understand how we define our “requirements” in a file, because this will be used very often.</p>\n<p>Side note: For meteor packages, you don’t actually have to import them, because they are pseudo-globals, which means, you can use what the package exports\nas a global variable. For the example above with simple-schema we could easily have in a file:</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// no importing SimpleSchema</span></div><div class=\"line\"><span class=\"keyword\">new</span> SimpleSchema(<span class=\"built_in\">config</span>);</div></pre></td></tr></table></figure>\n<p>However, it is not recommended, because if you use a code-linter (a thingie that will check your code syntax and what you use) it will burst out with failures,\nbecause it found no reference to SimpleSchema, because you do not imported. Hard-core programmers are against globals, and for a good reason.</p>\n<p>Meteor comes packed with MongoDB, Node, Npm, so you don’t have to worry about any dependencies.</p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2>"},{"title":"Collections","description":"How we store our data in Meteor.","_content":"\nHello again.\nSo you want to learn how to store the data in Meteor, fine...\n\nLet's proceed.\n\nMeteor uses MongoDB as its backbone. Theoretically you can use any database you wish with Meteor, because\nyou have access to http://www.npmjs.com, therefore you have access to all db drivers. Even MySQL !\n \nHowever, MongoDB gives Meteor its magic, unlike SQL, you don't have to CREATE TABLE, or CREATE FIELD to have a field,\nit lets you structure your data the way you want. However, you still need consistency, this is why later on,\nwe'll explore how we can ensure this consistency at APP level, not DB level, very easily.\n\nOk, so if you're familiar with SQL. Make this analogy, it'll help you grasp things faster:\n- **DATABASE** = Database (yep, we got the same name)\n- **TABLE** = Collection (something that a list of data, a collection)\n- **ROW** = Document (the actual list of data inside the collection)\n\nI like donuts, don't you like donuts, I love them so much I want to store them in a database:\n\n```\n// file: /imports/api/donuts/collection.js\nimport { Mongo } from 'meteor/mongo';\n\nconst Donuts = new Mongo.Collection('donuts');\n\nexport default Donuts;\n```\n\nOk now what. Well, now let's play with it. Go to your terminal and type: \n```\nmeteor run\n```\n\nThen open another terminal, go to same folder and run:\n```\nmeteor shell\n```\n\nMeteor shell is like a console for the server-side. Some quick tips, if you do in the shell:\n```\nconsole.log('hello shell');\n```\n\nYou won't see it there, because the actual message is logged in the console of where meteor is started. Keep that in mind it will help you in the future.\n\nNow, in the shell, let's import what we'll use:\n```\nimport Donuts from '/imports/api/donuts/collection.js'\n```\n\nNow let's do our first insert:\n```\nDonuts.insert({\n    color: 'pinkish-green', \n    flavors: ['mustard', 'onions'], \n    price: 999.0, \n    expiresAt: new Date(),\n    isCommestible: false,\n    ratings: {\n        taste: 2,\n        awesomeness: 10,\n    }\n})\n```\n\nWow! We inserted a string, array, number, date, boolean, and even an object. We can have array of objects, array of dates,\narray of array of array of objects that contains an array of array of dates (you get the idea). It's schemaless.\n\nNow let's fetch this baby:\n```\nDonuts.find().fetch()\n```\n\nNote: We'll explain later what's the deal with find() and fetch().\n\nOk now lets do a more complex search, for that let's add another donut:\n```\nDonuts.insert({price: 50, isCommestible: true});\n```\n\nYou may notice that you see something like:\n```\n'MLx7SF79kXvAZuEyx'\n```\n\nThat's because .insert() returns the newly created id. (Which is stored as _id in the Document)\n\nLet's search our database:\n```\n// Getting the commestible donuts\nDonuts.find({isCommestible: true}).fetch()\n\n// Getting the donuts with a price over 200\nDonuts.find({price: {$gt: 200}}).fetch()\n```\n\nYou have ability to use the selectors that MongoDB provides, here are all of them described:\nhttps://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators\n\nThere is also another argument that find() takes in, it's called \"options\":\n```\nDonuts.find({}, {\n    sort: {price: -1} // sorts price in descending order\n    limit: 2 // limits the results to 2\n    fields: {price: 1, isCommestible: 1} // will only return the fields price and isCommestible\n}).fetch()\n```\n\nThere are other fields as well, but we don't want to get into many details just yet, if you simply cannot abstain yourself from the curiosity, check it out:\nhttp://docs.meteor.com/api/collections.html#Mongo-Collection-find\n\nWhat about updating ?\n\n```\nDonuts.update({price: 50}, {\n    $set: {price: 51}\n})\n```\n\nThe first argument is \"what you want to update\", the second one is \"how you update it\". You can use stuff like \"$inc\" for incrementing, \n\"$addToSet\" if you want to add another disgusting ingredient in the \"flavors\" array.\n\nThe idea is you can do a lot of things, and there are many cool stuff, you can read more about it here:\nhttps://docs.mongodb.com/manual/reference/operator/update/\n\nRemoving is easy, the argument it takes is what to remove:\n```\nDonuts.remove({price: {gt: 1000}})\n```\n\nKeep playing with it, try new inserts, try new selectors, have a little bit of fun, you deserve it.\n\nIf you have a MongoDB visualizer, like \"Robomongo\" for Ubuntu, or any other tools out there http://lmgtfy.com/?q=mongodb+admin+software\nYou can connect to it by using \"localhost\" and port 3001 (but you must have Meteor started)\n\nQ: Ok so collections are nice, you showed me how to use them in a shell, but I'm a web dev, when do I start to see\nthings in ma freaking browser bro ?\n\nA: Soon.\n\n\n\n\n\n\n\n\n\n\n\n","source":"chapters/1/collections.md","raw":"---\ntitle: Collections\ndescription: How we store our data in Meteor.\n---\n\nHello again.\nSo you want to learn how to store the data in Meteor, fine...\n\nLet's proceed.\n\nMeteor uses MongoDB as its backbone. Theoretically you can use any database you wish with Meteor, because\nyou have access to http://www.npmjs.com, therefore you have access to all db drivers. Even MySQL !\n \nHowever, MongoDB gives Meteor its magic, unlike SQL, you don't have to CREATE TABLE, or CREATE FIELD to have a field,\nit lets you structure your data the way you want. However, you still need consistency, this is why later on,\nwe'll explore how we can ensure this consistency at APP level, not DB level, very easily.\n\nOk, so if you're familiar with SQL. Make this analogy, it'll help you grasp things faster:\n- **DATABASE** = Database (yep, we got the same name)\n- **TABLE** = Collection (something that a list of data, a collection)\n- **ROW** = Document (the actual list of data inside the collection)\n\nI like donuts, don't you like donuts, I love them so much I want to store them in a database:\n\n```\n// file: /imports/api/donuts/collection.js\nimport { Mongo } from 'meteor/mongo';\n\nconst Donuts = new Mongo.Collection('donuts');\n\nexport default Donuts;\n```\n\nOk now what. Well, now let's play with it. Go to your terminal and type: \n```\nmeteor run\n```\n\nThen open another terminal, go to same folder and run:\n```\nmeteor shell\n```\n\nMeteor shell is like a console for the server-side. Some quick tips, if you do in the shell:\n```\nconsole.log('hello shell');\n```\n\nYou won't see it there, because the actual message is logged in the console of where meteor is started. Keep that in mind it will help you in the future.\n\nNow, in the shell, let's import what we'll use:\n```\nimport Donuts from '/imports/api/donuts/collection.js'\n```\n\nNow let's do our first insert:\n```\nDonuts.insert({\n    color: 'pinkish-green', \n    flavors: ['mustard', 'onions'], \n    price: 999.0, \n    expiresAt: new Date(),\n    isCommestible: false,\n    ratings: {\n        taste: 2,\n        awesomeness: 10,\n    }\n})\n```\n\nWow! We inserted a string, array, number, date, boolean, and even an object. We can have array of objects, array of dates,\narray of array of array of objects that contains an array of array of dates (you get the idea). It's schemaless.\n\nNow let's fetch this baby:\n```\nDonuts.find().fetch()\n```\n\nNote: We'll explain later what's the deal with find() and fetch().\n\nOk now lets do a more complex search, for that let's add another donut:\n```\nDonuts.insert({price: 50, isCommestible: true});\n```\n\nYou may notice that you see something like:\n```\n'MLx7SF79kXvAZuEyx'\n```\n\nThat's because .insert() returns the newly created id. (Which is stored as _id in the Document)\n\nLet's search our database:\n```\n// Getting the commestible donuts\nDonuts.find({isCommestible: true}).fetch()\n\n// Getting the donuts with a price over 200\nDonuts.find({price: {$gt: 200}}).fetch()\n```\n\nYou have ability to use the selectors that MongoDB provides, here are all of them described:\nhttps://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators\n\nThere is also another argument that find() takes in, it's called \"options\":\n```\nDonuts.find({}, {\n    sort: {price: -1} // sorts price in descending order\n    limit: 2 // limits the results to 2\n    fields: {price: 1, isCommestible: 1} // will only return the fields price and isCommestible\n}).fetch()\n```\n\nThere are other fields as well, but we don't want to get into many details just yet, if you simply cannot abstain yourself from the curiosity, check it out:\nhttp://docs.meteor.com/api/collections.html#Mongo-Collection-find\n\nWhat about updating ?\n\n```\nDonuts.update({price: 50}, {\n    $set: {price: 51}\n})\n```\n\nThe first argument is \"what you want to update\", the second one is \"how you update it\". You can use stuff like \"$inc\" for incrementing, \n\"$addToSet\" if you want to add another disgusting ingredient in the \"flavors\" array.\n\nThe idea is you can do a lot of things, and there are many cool stuff, you can read more about it here:\nhttps://docs.mongodb.com/manual/reference/operator/update/\n\nRemoving is easy, the argument it takes is what to remove:\n```\nDonuts.remove({price: {gt: 1000}})\n```\n\nKeep playing with it, try new inserts, try new selectors, have a little bit of fun, you deserve it.\n\nIf you have a MongoDB visualizer, like \"Robomongo\" for Ubuntu, or any other tools out there http://lmgtfy.com/?q=mongodb+admin+software\nYou can connect to it by using \"localhost\" and port 3001 (but you must have Meteor started)\n\nQ: Ok so collections are nice, you showed me how to use them in a shell, but I'm a web dev, when do I start to see\nthings in ma freaking browser bro ?\n\nA: Soon.\n\n\n\n\n\n\n\n\n\n\n\n","date":"2016-10-27T07:25:11.846Z","updated":"2016-10-27T07:25:11.846Z","path":"chapters/1/collections.html","_id":"ciure80fa0001qtjxsc1d0ona","comments":1,"layout":"page","content":"<p>Hello again.\nSo you want to learn how to store the data in Meteor, fine…</p>\n<p>Let’s proceed.</p>\n<p>Meteor uses MongoDB as its backbone. Theoretically you can use any database you wish with Meteor, because\nyou have access to <a href=\"http://www.npmjs.com\" target=\"_blank\" rel=\"external\">http://www.npmjs.com</a>, therefore you have access to all db drivers. Even MySQL !</p>\n<p>However, MongoDB gives Meteor its magic, unlike SQL, you don’t have to CREATE TABLE, or CREATE FIELD to have a field,\nit lets you structure your data the way you want. However, you still need consistency, this is why later on,\nwe’ll explore how we can ensure this consistency at APP level, not DB level, very easily.</p>\n<p>Ok, so if you’re familiar with SQL. Make this analogy, it’ll help you grasp things faster:</p>\n<ul>\n<li><strong>DATABASE</strong> = Database (yep, we got the same name)</li>\n<li><strong>TABLE</strong> = Collection (something that a list of data, a collection)</li>\n<li><strong>ROW</strong> = Document (the actual list of data inside the collection)</li>\n</ul>\n<p>I like donuts, don’t you like donuts, I love them so much I want to store them in a database:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/donuts/collection.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Mongo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Donuts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'donuts'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Donuts;</div></pre></td></tr></table></figure>\n<p>Ok now what. Well, now let’s play with it. Go to your terminal and type: \n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure></p>\n<p>Then open another terminal, go to same folder and run:\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">meteor shell</span></div></pre></td></tr></table></figure></p>\n<p>Meteor shell is like a console for the server-side. Some quick tips, if you do in the shell:\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"string\">'hello shell'</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>You won’t see it there, because the actual message is logged in the console of where meteor is started. Keep that in mind it will help you in the future.</p>\n<p>Now, in the shell, let’s import what we’ll use:\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection.js'</span></div></pre></td></tr></table></figure></p>\n<p>Now let’s do our first insert:\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.insert</span>(&#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"string\">'pinkish-green'</span>, </div><div class=\"line\">    <span class=\"attribute\">flavors</span>: [<span class=\"string\">'mustard'</span>, <span class=\"string\">'onions'</span>], </div><div class=\"line\">    <span class=\"attribute\">price</span>: <span class=\"number\">999.0</span>, </div><div class=\"line\">    <span class=\"attribute\">expiresAt</span>: new Date(),</div><div class=\"line\">    <span class=\"attribute\">isCommestible</span>: false,</div><div class=\"line\">    <span class=\"attribute\">ratings</span>: &#123;</div><div class=\"line\">        <span class=\"attribute\">taste</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attribute\">awesomeness</span>: <span class=\"number\">10</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Wow! We inserted a string, array, number, date, boolean, and even an object. We can have array of objects, array of dates,\narray of array of array of objects that contains an array of array of dates (you get the idea). It’s schemaless.</p>\n<p>Now let’s fetch this baby:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.fetch</span>()</div></pre></td></tr></table></figure></p>\n<p>Note: We’ll explain later what’s the deal with find() and fetch().</p>\n<p>Ok now lets do a more complex search, for that let’s add another donut:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.insert</span>(&#123;<span class=\"attribute\">price</span>: <span class=\"number\">50</span>, isCommestible: true&#125;);</div></pre></td></tr></table></figure></p>\n<p>You may notice that you see something like:\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">'MLx7SF79kXvAZuEyx</span>'</div></pre></td></tr></table></figure></p>\n<p>That’s because .insert() returns the newly created id. (Which is stored as _id in the Document)</p>\n<p>Let’s search our database:\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Getting the commestible donuts</span></div><div class=\"line\">Donuts.find(&#123;<span class=\"string\">isCommestible:</span> <span class=\"literal\">true</span>&#125;).fetch()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Getting the donuts with a price over 200</span></div><div class=\"line\">Donuts.find(&#123;<span class=\"string\">price:</span> &#123;<span class=\"string\">$gt:</span> <span class=\"number\">200</span>&#125;&#125;).fetch()</div></pre></td></tr></table></figure></p>\n<p>You have ability to use the selectors that MongoDB provides, here are all of them described:\n<a href=\"https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators\" target=\"_blank\" rel=\"external\">https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators</a></p>\n<p>There is also another argument that find() takes in, it’s called “options”:\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.find</span>(&#123;&#125;, &#123;</div><div class=\"line\">    <span class=\"attribute\">sort</span>: &#123;<span class=\"attribute\">price</span>: -<span class=\"number\">1</span>&#125; <span class=\"comment\">// sorts price in descending order</span></div><div class=\"line\">    <span class=\"attribute\">limit</span>: <span class=\"number\">2</span> <span class=\"comment\">// limits the results to 2</span></div><div class=\"line\">    <span class=\"attribute\">fields</span>: &#123;<span class=\"attribute\">price</span>: <span class=\"number\">1</span>, <span class=\"attribute\">isCommestible</span>: <span class=\"number\">1</span>&#125; <span class=\"comment\">// will only return the fields price and isCommestible</span></div><div class=\"line\">&#125;)<span class=\"selector-class\">.fetch</span>()</div></pre></td></tr></table></figure></p>\n<p>There are other fields as well, but we don’t want to get into many details just yet, if you simply cannot abstain yourself from the curiosity, check it out:\n<a href=\"http://docs.meteor.com/api/collections.html#Mongo-Collection-find\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/collections.html#Mongo-Collection-find</a></p>\n<p>What about updating ?</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.update</span>(&#123;<span class=\"attribute\">price</span>: <span class=\"number\">50</span>&#125;, &#123;</div><div class=\"line\">    $<span class=\"attribute\">set</span>: &#123;<span class=\"attribute\">price</span>: <span class=\"number\">51</span>&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The first argument is “what you want to update”, the second one is “how you update it”. You can use stuff like “$inc” for incrementing, \n“$addToSet” if you want to add another disgusting ingredient in the “flavors” array.</p>\n<p>The idea is you can do a lot of things, and there are many cool stuff, you can read more about it here:\n<a href=\"https://docs.mongodb.com/manual/reference/operator/update/\" target=\"_blank\" rel=\"external\">https://docs.mongodb.com/manual/reference/operator/update/</a></p>\n<p>Removing is easy, the argument it takes is what to remove:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.remove</span>(&#123;<span class=\"attribute\">price</span>: &#123;gt: <span class=\"number\">1000</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>Keep playing with it, try new inserts, try new selectors, have a little bit of fun, you deserve it.</p>\n<p>If you have a MongoDB visualizer, like “Robomongo” for Ubuntu, or any other tools out there <a href=\"http://lmgtfy.com/?q=mongodb+admin+software\" target=\"_blank\" rel=\"external\">http://lmgtfy.com/?q=mongodb+admin+software</a>\nYou can connect to it by using “localhost” and port 3001 (but you must have Meteor started)</p>\n<p>Q: Ok so collections are nice, you showed me how to use them in a shell, but I’m a web dev, when do I start to see\nthings in ma freaking browser bro ?</p>\n<p>A: Soon.</p>\n","excerpt":"","more":"<p>Hello again.\nSo you want to learn how to store the data in Meteor, fine…</p>\n<p>Let’s proceed.</p>\n<p>Meteor uses MongoDB as its backbone. Theoretically you can use any database you wish with Meteor, because\nyou have access to <a href=\"http://www.npmjs.com\">http://www.npmjs.com</a>, therefore you have access to all db drivers. Even MySQL !</p>\n<p>However, MongoDB gives Meteor its magic, unlike SQL, you don’t have to CREATE TABLE, or CREATE FIELD to have a field,\nit lets you structure your data the way you want. However, you still need consistency, this is why later on,\nwe’ll explore how we can ensure this consistency at APP level, not DB level, very easily.</p>\n<p>Ok, so if you’re familiar with SQL. Make this analogy, it’ll help you grasp things faster:</p>\n<ul>\n<li><strong>DATABASE</strong> = Database (yep, we got the same name)</li>\n<li><strong>TABLE</strong> = Collection (something that a list of data, a collection)</li>\n<li><strong>ROW</strong> = Document (the actual list of data inside the collection)</li>\n</ul>\n<p>I like donuts, don’t you like donuts, I love them so much I want to store them in a database:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/donuts/collection.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Mongo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Donuts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'donuts'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Donuts;</div></pre></td></tr></table></figure>\n<p>Ok now what. Well, now let’s play with it. Go to your terminal and type: \n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure></p>\n<p>Then open another terminal, go to same folder and run:\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">meteor shell</span></div></pre></td></tr></table></figure></p>\n<p>Meteor shell is like a console for the server-side. Some quick tips, if you do in the shell:\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"string\">'hello shell'</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>You won’t see it there, because the actual message is logged in the console of where meteor is started. Keep that in mind it will help you in the future.</p>\n<p>Now, in the shell, let’s import what we’ll use:\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection.js'</span></div></pre></td></tr></table></figure></p>\n<p>Now let’s do our first insert:\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.insert</span>(&#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"string\">'pinkish-green'</span>, </div><div class=\"line\">    <span class=\"attribute\">flavors</span>: [<span class=\"string\">'mustard'</span>, <span class=\"string\">'onions'</span>], </div><div class=\"line\">    <span class=\"attribute\">price</span>: <span class=\"number\">999.0</span>, </div><div class=\"line\">    <span class=\"attribute\">expiresAt</span>: new Date(),</div><div class=\"line\">    <span class=\"attribute\">isCommestible</span>: false,</div><div class=\"line\">    <span class=\"attribute\">ratings</span>: &#123;</div><div class=\"line\">        <span class=\"attribute\">taste</span>: <span class=\"number\">2</span>,</div><div class=\"line\">        <span class=\"attribute\">awesomeness</span>: <span class=\"number\">10</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Wow! We inserted a string, array, number, date, boolean, and even an object. We can have array of objects, array of dates,\narray of array of array of objects that contains an array of array of dates (you get the idea). It’s schemaless.</p>\n<p>Now let’s fetch this baby:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.fetch</span>()</div></pre></td></tr></table></figure></p>\n<p>Note: We’ll explain later what’s the deal with find() and fetch().</p>\n<p>Ok now lets do a more complex search, for that let’s add another donut:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.insert</span>(&#123;<span class=\"attribute\">price</span>: <span class=\"number\">50</span>, isCommestible: true&#125;);</div></pre></td></tr></table></figure></p>\n<p>You may notice that you see something like:\n<figure class=\"highlight scheme\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">'MLx7SF79kXvAZuEyx</span>'</div></pre></td></tr></table></figure></p>\n<p>That’s because .insert() returns the newly created id. (Which is stored as _id in the Document)</p>\n<p>Let’s search our database:\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Getting the commestible donuts</span></div><div class=\"line\">Donuts.find(&#123;<span class=\"string\">isCommestible:</span> <span class=\"literal\">true</span>&#125;).fetch()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Getting the donuts with a price over 200</span></div><div class=\"line\">Donuts.find(&#123;<span class=\"string\">price:</span> &#123;<span class=\"string\">$gt:</span> <span class=\"number\">200</span>&#125;&#125;).fetch()</div></pre></td></tr></table></figure></p>\n<p>You have ability to use the selectors that MongoDB provides, here are all of them described:\n<a href=\"https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators\">https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators</a></p>\n<p>There is also another argument that find() takes in, it’s called “options”:\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.find</span>(&#123;&#125;, &#123;</div><div class=\"line\">    <span class=\"attribute\">sort</span>: &#123;<span class=\"attribute\">price</span>: -<span class=\"number\">1</span>&#125; <span class=\"comment\">// sorts price in descending order</span></div><div class=\"line\">    <span class=\"attribute\">limit</span>: <span class=\"number\">2</span> <span class=\"comment\">// limits the results to 2</span></div><div class=\"line\">    <span class=\"attribute\">fields</span>: &#123;<span class=\"attribute\">price</span>: <span class=\"number\">1</span>, <span class=\"attribute\">isCommestible</span>: <span class=\"number\">1</span>&#125; <span class=\"comment\">// will only return the fields price and isCommestible</span></div><div class=\"line\">&#125;)<span class=\"selector-class\">.fetch</span>()</div></pre></td></tr></table></figure></p>\n<p>There are other fields as well, but we don’t want to get into many details just yet, if you simply cannot abstain yourself from the curiosity, check it out:\n<a href=\"http://docs.meteor.com/api/collections.html#Mongo-Collection-find\">http://docs.meteor.com/api/collections.html#Mongo-Collection-find</a></p>\n<p>What about updating ?</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.update</span>(&#123;<span class=\"attribute\">price</span>: <span class=\"number\">50</span>&#125;, &#123;</div><div class=\"line\">    $<span class=\"attribute\">set</span>: &#123;<span class=\"attribute\">price</span>: <span class=\"number\">51</span>&#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The first argument is “what you want to update”, the second one is “how you update it”. You can use stuff like “$inc” for incrementing, \n“$addToSet” if you want to add another disgusting ingredient in the “flavors” array.</p>\n<p>The idea is you can do a lot of things, and there are many cool stuff, you can read more about it here:\n<a href=\"https://docs.mongodb.com/manual/reference/operator/update/\">https://docs.mongodb.com/manual/reference/operator/update/</a></p>\n<p>Removing is easy, the argument it takes is what to remove:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.remove</span>(&#123;<span class=\"attribute\">price</span>: &#123;gt: <span class=\"number\">1000</span>&#125;&#125;)</div></pre></td></tr></table></figure></p>\n<p>Keep playing with it, try new inserts, try new selectors, have a little bit of fun, you deserve it.</p>\n<p>If you have a MongoDB visualizer, like “Robomongo” for Ubuntu, or any other tools out there <a href=\"http://lmgtfy.com/?q=mongodb+admin+software\">http://lmgtfy.com/?q=mongodb+admin+software</a>\nYou can connect to it by using “localhost” and port 3001 (but you must have Meteor started)</p>\n<p>Q: Ok so collections are nice, you showed me how to use them in a shell, but I’m a web dev, when do I start to see\nthings in ma freaking browser bro ?</p>\n<p>A: Soon.</p>\n"},{"title":"Methods","description":"The RPC of Meteor.","_content":"\n## What is Method ?\n\nQ: First off, what the heck is RPC ?\n\nA: RPC stands for \"Remote Procedure Call\", in basic terms it means that you invoke \"something\" with (optionally) some arguments, and expect a response, OR AN ERROR! HAHAHAHAHAHA. Ok.\n\nIn Meteor, this is achieved by communicating with a websocket. You can disable websockets and it falls back to something else, but let's not get into\nthis right now, lets stay focused.\n\nIn a project we use methods to perform actions such as:\n- Fetching the data\n- Inserting Data\n- Updating/Deleting Data\n- Making API calls\n- Any other dirty thing you can possibly think of\n\nMethods are created server-side, but they can work client-side also (we'll explain it later)\n\n## Creating a Method\n\n```\n// imports/api/donuts/methods.js\nimport { Meteor } from 'meteor/meteor';\nimport Donuts from '/imports/api/donuts/collection';\n\nMeteor.methods({\n    'create_a_donut': function () {\n        return Donuts.insert({price: 100})\n    }\n})\n```\n\n## Calling a Method\n\nMethods can be called from server or client. First let's try it in our *meteor shell*:\n\n```\nMeteor.call('create_a_donut')\n```\n\nOOOPS! \n```\nError: Method 'create_a_donut' not found [404]\n```\n\nMeteor has basically no idea about your method, you just created a file, inside imports. There is absolutely no link to it.\n\nRemember the \"/imports/startup/server/index.js\" file, welp, that's where you have to import the methods.js file:\n```\n// file: /imports/startup/server/js\nimport '/imports/api/donuts/methods.js';\n```\n\nNow let the server refresh itself and try again you should see something like:\n```\n> Meteor.call('create_a_donut')\n'MLx7SF79kXvAZuEyx'\n```\n\nThat's because we do `return Donuts.insert({price: 100})` and insert() returns the newly created _id,\nand what you return in the method body is returned to the caller. You can return anything you want, objects,\narrays, strings, dates. Back scene, data is serialized to [EJSON](http://docs.meteor.com/api/ejson.html) then deserialized where it's called.\n\nNow let's finally open that browser. http://localhost:3000 open it.\nNow open your browser's console. We recommend Chrome, but you can use anything you want.\n\n```\nMeteor.call('create_a_donut')\n```\n\nHmm... I got no feedback here. Let me check the database. Oops, it's there! What's going on ?\n\nWell, client-side when you do a call, you don't get the answer instantly, because it has to communicate through the websocket with the server,\nthe server needs to do it's thingie and return the results, this can take few miliseconds. This is why we need to provide a callback:\n\n```\nMeteor.call('create_a_donut', function (err, res) {\n     console.log(res);\n})\n```\n\nOk, now it works, but what is \"err\" ? Why is it like this ? \nThe why is explained here: http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/\n\n## Method Errors\n\nIf you do a `console.log(err)` you will see that it's undefined. Because the server did not throw any error while handling your method.\n\nLet's trigger an error:\n```\n// imports/api/donuts/methods.js\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n    'create_a_donut': function () {\n        throw \"I don't wanna!\"; // throw accepts any type argument, not only string\n    }\n})\n```\n\nNow if we do this in the shell:\n```\nMeteor.call('create_a_donut')\n```\n\nWe will receive a simple string with the error. Doesn't help us very much, we don't know if it's an actual response or an error. However,\ndon't panic and don't get confused, you can use server-side callbacks as well:\n\n```\nMeteor.call('create_a_donut', function (err, res) {\n    console.log(err, res);\n})\n```\n\nNow let's move a bit to the client. The reason I insist in this, it's because you'll encounter a lot of errors and identifying and treating them\nis critical to any web developer.\n\nMake the same call as above for the client.\n\nYou should get something like:\n```\nerrorClass {\n    details: undefined\n    error: 500\n    errorType: \"Meteor.Error\"\n    message: \"Internal server error [500]\"\n    reason: \"Internal server error\"\n}\n```\n\nNot very helpful is it ? You have no clue about what the error is about on the client, unlike the server.\n\nThis is why, in order to throw errors that are descriptive for the client as well we need to use [Meteor.Error](https://docs.meteor.com/api/methods.html#Meteor-Error)\n\n```\nMeteor.methods({\n    'create_a_donut': function () {\n        throw new Meteor.Error('error', 'I do not really want it', {\n            why: \"I have eaten too many\"\n        });\n        // First argument (error): is something very general, can be a number like 500, 404, \n        // Second argument (reason): is a description of the error\n        // Third argument (details): is for providing more details about the error.\n    }\n})\n```\n\nNow if you do the call on the client:\n\n```\nMeteor.call('create_a_donut', function (err, res) {\n    if (err) {\n        console.log('There was an error: ', err);\n        // in err object you have to (err.error, err.reason, err.details)\n    } else {\n        console.log('Wooho! No Errors');\n    }\n})\n```\n\nMakes sense ? Just keep this in mind, use Meteor.Error for throwing exceptions.\n\n## Method Arguments \n\nMethods can ofcourse receive arguments (any kind of arguments):\n\n```\n// server\nMeteor.methods({\n    'create_a_donut': function (one, two, three) {\n        return [one, two, three];\n    }\n})\n\n// client or server\nMeteor.call('create_a_donut', 'One', 'Two', {three: 'Arguments'}, function (err, res) {\n    console.log(res);\n})\n```\n\nNow, methods are very complex in functionality, however, we will get into them later in this or other chapters.\n\n\n## Homework\n\n1. Create a method that returns all donuts\n```\nMeteor.call('donuts.list', {price: {$gt: 200}, callback)\n```\n\n2. Create a method that returns all donuts with a set of filters that you pass in the client:\n```\nMeteor.call('donuts.list_filtered', {price: {$gt: 200}, callback)\n```\n\n3. Create a method that takes two arguments, _id and data, and *$set*s the data for the donut with that _id\n\n","source":"chapters/1/methods.md","raw":"---\ntitle: Methods\ndescription: The RPC of Meteor.\n---\n\n## What is Method ?\n\nQ: First off, what the heck is RPC ?\n\nA: RPC stands for \"Remote Procedure Call\", in basic terms it means that you invoke \"something\" with (optionally) some arguments, and expect a response, OR AN ERROR! HAHAHAHAHAHA. Ok.\n\nIn Meteor, this is achieved by communicating with a websocket. You can disable websockets and it falls back to something else, but let's not get into\nthis right now, lets stay focused.\n\nIn a project we use methods to perform actions such as:\n- Fetching the data\n- Inserting Data\n- Updating/Deleting Data\n- Making API calls\n- Any other dirty thing you can possibly think of\n\nMethods are created server-side, but they can work client-side also (we'll explain it later)\n\n## Creating a Method\n\n```\n// imports/api/donuts/methods.js\nimport { Meteor } from 'meteor/meteor';\nimport Donuts from '/imports/api/donuts/collection';\n\nMeteor.methods({\n    'create_a_donut': function () {\n        return Donuts.insert({price: 100})\n    }\n})\n```\n\n## Calling a Method\n\nMethods can be called from server or client. First let's try it in our *meteor shell*:\n\n```\nMeteor.call('create_a_donut')\n```\n\nOOOPS! \n```\nError: Method 'create_a_donut' not found [404]\n```\n\nMeteor has basically no idea about your method, you just created a file, inside imports. There is absolutely no link to it.\n\nRemember the \"/imports/startup/server/index.js\" file, welp, that's where you have to import the methods.js file:\n```\n// file: /imports/startup/server/js\nimport '/imports/api/donuts/methods.js';\n```\n\nNow let the server refresh itself and try again you should see something like:\n```\n> Meteor.call('create_a_donut')\n'MLx7SF79kXvAZuEyx'\n```\n\nThat's because we do `return Donuts.insert({price: 100})` and insert() returns the newly created _id,\nand what you return in the method body is returned to the caller. You can return anything you want, objects,\narrays, strings, dates. Back scene, data is serialized to [EJSON](http://docs.meteor.com/api/ejson.html) then deserialized where it's called.\n\nNow let's finally open that browser. http://localhost:3000 open it.\nNow open your browser's console. We recommend Chrome, but you can use anything you want.\n\n```\nMeteor.call('create_a_donut')\n```\n\nHmm... I got no feedback here. Let me check the database. Oops, it's there! What's going on ?\n\nWell, client-side when you do a call, you don't get the answer instantly, because it has to communicate through the websocket with the server,\nthe server needs to do it's thingie and return the results, this can take few miliseconds. This is why we need to provide a callback:\n\n```\nMeteor.call('create_a_donut', function (err, res) {\n     console.log(res);\n})\n```\n\nOk, now it works, but what is \"err\" ? Why is it like this ? \nThe why is explained here: http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/\n\n## Method Errors\n\nIf you do a `console.log(err)` you will see that it's undefined. Because the server did not throw any error while handling your method.\n\nLet's trigger an error:\n```\n// imports/api/donuts/methods.js\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n    'create_a_donut': function () {\n        throw \"I don't wanna!\"; // throw accepts any type argument, not only string\n    }\n})\n```\n\nNow if we do this in the shell:\n```\nMeteor.call('create_a_donut')\n```\n\nWe will receive a simple string with the error. Doesn't help us very much, we don't know if it's an actual response or an error. However,\ndon't panic and don't get confused, you can use server-side callbacks as well:\n\n```\nMeteor.call('create_a_donut', function (err, res) {\n    console.log(err, res);\n})\n```\n\nNow let's move a bit to the client. The reason I insist in this, it's because you'll encounter a lot of errors and identifying and treating them\nis critical to any web developer.\n\nMake the same call as above for the client.\n\nYou should get something like:\n```\nerrorClass {\n    details: undefined\n    error: 500\n    errorType: \"Meteor.Error\"\n    message: \"Internal server error [500]\"\n    reason: \"Internal server error\"\n}\n```\n\nNot very helpful is it ? You have no clue about what the error is about on the client, unlike the server.\n\nThis is why, in order to throw errors that are descriptive for the client as well we need to use [Meteor.Error](https://docs.meteor.com/api/methods.html#Meteor-Error)\n\n```\nMeteor.methods({\n    'create_a_donut': function () {\n        throw new Meteor.Error('error', 'I do not really want it', {\n            why: \"I have eaten too many\"\n        });\n        // First argument (error): is something very general, can be a number like 500, 404, \n        // Second argument (reason): is a description of the error\n        // Third argument (details): is for providing more details about the error.\n    }\n})\n```\n\nNow if you do the call on the client:\n\n```\nMeteor.call('create_a_donut', function (err, res) {\n    if (err) {\n        console.log('There was an error: ', err);\n        // in err object you have to (err.error, err.reason, err.details)\n    } else {\n        console.log('Wooho! No Errors');\n    }\n})\n```\n\nMakes sense ? Just keep this in mind, use Meteor.Error for throwing exceptions.\n\n## Method Arguments \n\nMethods can ofcourse receive arguments (any kind of arguments):\n\n```\n// server\nMeteor.methods({\n    'create_a_donut': function (one, two, three) {\n        return [one, two, three];\n    }\n})\n\n// client or server\nMeteor.call('create_a_donut', 'One', 'Two', {three: 'Arguments'}, function (err, res) {\n    console.log(res);\n})\n```\n\nNow, methods are very complex in functionality, however, we will get into them later in this or other chapters.\n\n\n## Homework\n\n1. Create a method that returns all donuts\n```\nMeteor.call('donuts.list', {price: {$gt: 200}, callback)\n```\n\n2. Create a method that returns all donuts with a set of filters that you pass in the client:\n```\nMeteor.call('donuts.list_filtered', {price: {$gt: 200}, callback)\n```\n\n3. Create a method that takes two arguments, _id and data, and *$set*s the data for the donut with that _id\n\n","date":"2016-10-27T07:51:32.575Z","updated":"2016-10-27T07:51:32.575Z","path":"chapters/1/methods.html","_id":"ciurfdnnz0002qtjx635uz520","comments":1,"layout":"page","content":"<h2 id=\"What-is-Method\"><a href=\"#What-is-Method\" class=\"headerlink\" title=\"What is Method ?\"></a>What is Method ?</h2><p>Q: First off, what the heck is RPC ?</p>\n<p>A: RPC stands for “Remote Procedure Call”, in basic terms it means that you invoke “something” with (optionally) some arguments, and expect a response, OR AN ERROR! HAHAHAHAHAHA. Ok.</p>\n<p>In Meteor, this is achieved by communicating with a websocket. You can disable websockets and it falls back to something else, but let’s not get into\nthis right now, lets stay focused.</p>\n<p>In a project we use methods to perform actions such as:</p>\n<ul>\n<li>Fetching the data</li>\n<li>Inserting Data</li>\n<li>Updating/Deleting Data</li>\n<li>Making API calls</li>\n<li>Any other dirty thing you can possibly think of</li>\n</ul>\n<p>Methods are created server-side, but they can work client-side also (we’ll explain it later)</p>\n<h2 id=\"Creating-a-Method\"><a href=\"#Creating-a-Method\" class=\"headerlink\" title=\"Creating a Method\"></a>Creating a Method</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// imports/api/donuts/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Donuts.insert(&#123;<span class=\"attr\">price</span>: <span class=\"number\">100</span>&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Calling-a-Method\"><a href=\"#Calling-a-Method\" class=\"headerlink\" title=\"Calling a Method\"></a>Calling a Method</h2><p>Methods can be called from server or client. First let’s try it in our <em>meteor shell</em>:</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure>\n<p>OOOPS! \n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: <span class=\"function\"><span class=\"keyword\">Method</span> '<span class=\"title\">create_a_donut</span>' <span class=\"title\">not</span> <span class=\"title\">found</span> [404]</span></div></pre></td></tr></table></figure></p>\n<p>Meteor has basically no idea about your method, you just created a file, inside imports. There is absolutely no link to it.</p>\n<p>Remember the “/imports/startup/server/index.js” file, welp, that’s where you have to import the methods.js file:\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> file: <span class=\"regexp\">/imports/</span>startup<span class=\"regexp\">/server/</span>js</div><div class=\"line\">import <span class=\"string\">'/imports/api/donuts/methods.js'</span>;</div></pre></td></tr></table></figure></p>\n<p>Now let the server refresh itself and try again you should see something like:\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'create_a_donut'</span>)</div><div class=\"line\"><span class=\"string\">'MLx7SF79kXvAZuEyx'</span></div></pre></td></tr></table></figure></p>\n<p>That’s because we do <code>return Donuts.insert({price: 100})</code> and insert() returns the newly created _id,\nand what you return in the method body is returned to the caller. You can return anything you want, objects,\narrays, strings, dates. Back scene, data is serialized to <a href=\"http://docs.meteor.com/api/ejson.html\" target=\"_blank\" rel=\"external\">EJSON</a> then deserialized where it’s called.</p>\n<p>Now let’s finally open that browser. <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a> open it.\nNow open your browser’s console. We recommend Chrome, but you can use anything you want.</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure>\n<p>Hmm… I got no feedback here. Let me check the database. Oops, it’s there! What’s going on ?</p>\n<p>Well, client-side when you do a call, you don’t get the answer instantly, because it has to communicate through the websocket with the server,\nthe server needs to do it’s thingie and return the results, this can take few miliseconds. This is why we need to provide a callback:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Ok, now it works, but what is “err” ? Why is it like this ? \nThe why is explained here: <a href=\"http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/\" target=\"_blank\" rel=\"external\">http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/</a></p>\n<h2 id=\"Method-Errors\"><a href=\"#Method-Errors\" class=\"headerlink\" title=\"Method Errors\"></a>Method Errors</h2><p>If you do a <code>console.log(err)</code> you will see that it’s undefined. Because the server did not throw any error while handling your method.</p>\n<p>Let’s trigger an error:\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// imports/api/donuts/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">\"I don't wanna!\"</span>; <span class=\"comment\">// throw accepts any type argument, not only string</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Now if we do this in the shell:\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure></p>\n<p>We will receive a simple string with the error. Doesn’t help us very much, we don’t know if it’s an actual response or an error. However,\ndon’t panic and don’t get confused, you can use server-side callbacks as well:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err, res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now let’s move a bit to the client. The reason I insist in this, it’s because you’ll encounter a lot of errors and identifying and treating them\nis critical to any web developer.</p>\n<p>Make the same call as above for the client.</p>\n<p>You should get something like:\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">errorClass </span>&#123;</div><div class=\"line\"><span class=\"symbol\">    details:</span> undefined</div><div class=\"line\"><span class=\"symbol\">    error:</span> <span class=\"number\">500</span></div><div class=\"line\"><span class=\"symbol\">    errorType:</span> <span class=\"string\">\"Meteor.Error\"</span></div><div class=\"line\"><span class=\"symbol\">    message:</span> <span class=\"string\">\"Internal server error [500]\"</span></div><div class=\"line\"><span class=\"symbol\">    reason:</span> <span class=\"string\">\"Internal server error\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Not very helpful is it ? You have no clue about what the error is about on the client, unlike the server.</p>\n<p>This is why, in order to throw errors that are descriptive for the client as well we need to use <a href=\"https://docs.meteor.com/api/methods.html#Meteor-Error\" target=\"_blank\" rel=\"external\">Meteor.Error</a></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'error'</span>, <span class=\"string\">'I do not really want it'</span>, &#123;</div><div class=\"line\">            why: <span class=\"string\">\"I have eaten too many\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">// First argument (error): is something very general, can be a number like 500, 404, </span></div><div class=\"line\">        <span class=\"comment\">// Second argument (reason): is a description of the error</span></div><div class=\"line\">        <span class=\"comment\">// Third argument (details): is for providing more details about the error.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now if you do the call on the client:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'There was an error: '</span>, err);</div><div class=\"line\">        <span class=\"comment\">// in err object you have to (err.error, err.reason, err.details)</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Wooho! No Errors'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Makes sense ? Just keep this in mind, use Meteor.Error for throwing exceptions.</p>\n<h2 id=\"Method-Arguments\"><a href=\"#Method-Arguments\" class=\"headerlink\" title=\"Method Arguments\"></a>Method Arguments</h2><p>Methods can ofcourse receive arguments (any kind of arguments):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// server</span></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">one, two, three</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [one, two, three];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// client or server</span></div><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"string\">'One'</span>, <span class=\"string\">'Two'</span>, &#123;<span class=\"attr\">three</span>: <span class=\"string\">'Arguments'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now, methods are very complex in functionality, however, we will get into them later in this or other chapters.</p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><ol>\n<li><p>Create a method that returns all donuts</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'donuts.list'</span>, &#123;price: &#123;$gt: <span class=\"number\">200</span>&#125;, callback)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Create a method that returns all donuts with a set of filters that you pass in the client:</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'donuts.list_filtered'</span>, &#123;price: &#123;$gt: <span class=\"number\">200</span>&#125;, callback)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Create a method that takes two arguments, _id and data, and <em>$set</em>s the data for the donut with that _id</p>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"What-is-Method\"><a href=\"#What-is-Method\" class=\"headerlink\" title=\"What is Method ?\"></a>What is Method ?</h2><p>Q: First off, what the heck is RPC ?</p>\n<p>A: RPC stands for “Remote Procedure Call”, in basic terms it means that you invoke “something” with (optionally) some arguments, and expect a response, OR AN ERROR! HAHAHAHAHAHA. Ok.</p>\n<p>In Meteor, this is achieved by communicating with a websocket. You can disable websockets and it falls back to something else, but let’s not get into\nthis right now, lets stay focused.</p>\n<p>In a project we use methods to perform actions such as:</p>\n<ul>\n<li>Fetching the data</li>\n<li>Inserting Data</li>\n<li>Updating/Deleting Data</li>\n<li>Making API calls</li>\n<li>Any other dirty thing you can possibly think of</li>\n</ul>\n<p>Methods are created server-side, but they can work client-side also (we’ll explain it later)</p>\n<h2 id=\"Creating-a-Method\"><a href=\"#Creating-a-Method\" class=\"headerlink\" title=\"Creating a Method\"></a>Creating a Method</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// imports/api/donuts/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Donuts.insert(&#123;<span class=\"attr\">price</span>: <span class=\"number\">100</span>&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Calling-a-Method\"><a href=\"#Calling-a-Method\" class=\"headerlink\" title=\"Calling a Method\"></a>Calling a Method</h2><p>Methods can be called from server or client. First let’s try it in our <em>meteor shell</em>:</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure>\n<p>OOOPS! \n<figure class=\"highlight oxygene\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: <span class=\"function\"><span class=\"keyword\">Method</span> '<span class=\"title\">create_a_donut</span>' <span class=\"title\">not</span> <span class=\"title\">found</span> [404]</span></div></pre></td></tr></table></figure></p>\n<p>Meteor has basically no idea about your method, you just created a file, inside imports. There is absolutely no link to it.</p>\n<p>Remember the “/imports/startup/server/index.js” file, welp, that’s where you have to import the methods.js file:\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> file: <span class=\"regexp\">/imports/</span>startup<span class=\"regexp\">/server/</span>js</div><div class=\"line\">import <span class=\"string\">'/imports/api/donuts/methods.js'</span>;</div></pre></td></tr></table></figure></p>\n<p>Now let the server refresh itself and try again you should see something like:\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'create_a_donut'</span>)</div><div class=\"line\"><span class=\"string\">'MLx7SF79kXvAZuEyx'</span></div></pre></td></tr></table></figure></p>\n<p>That’s because we do <code>return Donuts.insert({price: 100})</code> and insert() returns the newly created _id,\nand what you return in the method body is returned to the caller. You can return anything you want, objects,\narrays, strings, dates. Back scene, data is serialized to <a href=\"http://docs.meteor.com/api/ejson.html\">EJSON</a> then deserialized where it’s called.</p>\n<p>Now let’s finally open that browser. <a href=\"http://localhost:3000\">http://localhost:3000</a> open it.\nNow open your browser’s console. We recommend Chrome, but you can use anything you want.</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure>\n<p>Hmm… I got no feedback here. Let me check the database. Oops, it’s there! What’s going on ?</p>\n<p>Well, client-side when you do a call, you don’t get the answer instantly, because it has to communicate through the websocket with the server,\nthe server needs to do it’s thingie and return the results, this can take few miliseconds. This is why we need to provide a callback:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Ok, now it works, but what is “err” ? Why is it like this ? \nThe why is explained here: <a href=\"http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/\">http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/</a></p>\n<h2 id=\"Method-Errors\"><a href=\"#Method-Errors\" class=\"headerlink\" title=\"Method Errors\"></a>Method Errors</h2><p>If you do a <code>console.log(err)</code> you will see that it’s undefined. Because the server did not throw any error while handling your method.</p>\n<p>Let’s trigger an error:\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// imports/api/donuts/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"string\">\"I don't wanna!\"</span>; <span class=\"comment\">// throw accepts any type argument, not only string</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Now if we do this in the shell:\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'create_a_donut'</span>)</div></pre></td></tr></table></figure></p>\n<p>We will receive a simple string with the error. Doesn’t help us very much, we don’t know if it’s an actual response or an error. However,\ndon’t panic and don’t get confused, you can use server-side callbacks as well:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err, res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now let’s move a bit to the client. The reason I insist in this, it’s because you’ll encounter a lot of errors and identifying and treating them\nis critical to any web developer.</p>\n<p>Make the same call as above for the client.</p>\n<p>You should get something like:\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\">errorClass </span>&#123;</div><div class=\"line\"><span class=\"symbol\">    details:</span> undefined</div><div class=\"line\"><span class=\"symbol\">    error:</span> <span class=\"number\">500</span></div><div class=\"line\"><span class=\"symbol\">    errorType:</span> <span class=\"string\">\"Meteor.Error\"</span></div><div class=\"line\"><span class=\"symbol\">    message:</span> <span class=\"string\">\"Internal server error [500]\"</span></div><div class=\"line\"><span class=\"symbol\">    reason:</span> <span class=\"string\">\"Internal server error\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Not very helpful is it ? You have no clue about what the error is about on the client, unlike the server.</p>\n<p>This is why, in order to throw errors that are descriptive for the client as well we need to use <a href=\"https://docs.meteor.com/api/methods.html#Meteor-Error\">Meteor.Error</a></p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'error'</span>, <span class=\"string\">'I do not really want it'</span>, &#123;</div><div class=\"line\">            why: <span class=\"string\">\"I have eaten too many\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"comment\">// First argument (error): is something very general, can be a number like 500, 404, </span></div><div class=\"line\">        <span class=\"comment\">// Second argument (reason): is a description of the error</span></div><div class=\"line\">        <span class=\"comment\">// Third argument (details): is for providing more details about the error.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now if you do the call on the client:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'There was an error: '</span>, err);</div><div class=\"line\">        <span class=\"comment\">// in err object you have to (err.error, err.reason, err.details)</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Wooho! No Errors'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Makes sense ? Just keep this in mind, use Meteor.Error for throwing exceptions.</p>\n<h2 id=\"Method-Arguments\"><a href=\"#Method-Arguments\" class=\"headerlink\" title=\"Method Arguments\"></a>Method Arguments</h2><p>Methods can ofcourse receive arguments (any kind of arguments):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// server</span></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'create_a_donut'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">one, two, three</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> [one, two, three];</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// client or server</span></div><div class=\"line\">Meteor.call(<span class=\"string\">'create_a_donut'</span>, <span class=\"string\">'One'</span>, <span class=\"string\">'Two'</span>, &#123;<span class=\"attr\">three</span>: <span class=\"string\">'Arguments'</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(res);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now, methods are very complex in functionality, however, we will get into them later in this or other chapters.</p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><ol>\n<li><p>Create a method that returns all donuts</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'donuts.list'</span>, &#123;price: &#123;$gt: <span class=\"number\">200</span>&#125;, callback)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Create a method that returns all donuts with a set of filters that you pass in the client:</p>\n<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.<span class=\"built_in\">call</span>(<span class=\"string\">'donuts.list_filtered'</span>, &#123;price: &#123;$gt: <span class=\"number\">200</span>&#125;, callback)</div></pre></td></tr></table></figure>\n</li>\n<li><p>Create a method that takes two arguments, _id and data, and <em>$set</em>s the data for the donut with that _id</p>\n</li>\n</ol>\n"},{"title":"Introduction","description":"What are these tutorials about ?","_content":"\n<h1>Hello!</h1>\n\nWe are Cult of Coders, a young company focused on Meteor. We absolutely love it, and we only work with it.\n\nIn the past years we gathered a lot of experience, Meteor has changed a lot, but it is now fully packed with lots\nof cool stuff that will help you create from the most simple apps to complex enterprise-level applications.\n\nOur tutorials will be structured in chapters. Each chapter will have different lessons.\n\nWe encourage you to put in practice everything you learn. This way you will remember it better in the future.\n\n<h1>Before you begin</h1>\n\nThis tutorial is focused on Meteor. We need to keep our concerns separated, this is why, it will assume that you already have\na JavaScript ES6 foundation.\n\nIf you are not familiar with JavaScript at all:\n- https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\n\nIf you are familiar with JS, but not with the ES6 syntax:\n- https://github.com/ericdouglas/ES6-Learning\n- http://es6katas.org/\n- http://learnharmony.org/\n","source":"index.md","raw":"---\ntitle: Introduction\ndescription: What are these tutorials about ?\n---\n\n<h1>Hello!</h1>\n\nWe are Cult of Coders, a young company focused on Meteor. We absolutely love it, and we only work with it.\n\nIn the past years we gathered a lot of experience, Meteor has changed a lot, but it is now fully packed with lots\nof cool stuff that will help you create from the most simple apps to complex enterprise-level applications.\n\nOur tutorials will be structured in chapters. Each chapter will have different lessons.\n\nWe encourage you to put in practice everything you learn. This way you will remember it better in the future.\n\n<h1>Before you begin</h1>\n\nThis tutorial is focused on Meteor. We need to keep our concerns separated, this is why, it will assume that you already have\na JavaScript ES6 foundation.\n\nIf you are not familiar with JavaScript at all:\n- https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy\n- https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\n\nIf you are familiar with JS, but not with the ES6 syntax:\n- https://github.com/ericdouglas/ES6-Learning\n- http://es6katas.org/\n- http://learnharmony.org/\n","date":"2016-10-27T07:22:28.985Z","updated":"2016-10-27T07:22:28.981Z","path":"index.html","_id":"ciurgklpx0000zwjxxxu58myv","comments":1,"layout":"page","content":"<h1>Hello!</h1>\n\n<p>We are Cult of Coders, a young company focused on Meteor. We absolutely love it, and we only work with it.</p>\n<p>In the past years we gathered a lot of experience, Meteor has changed a lot, but it is now fully packed with lots\nof cool stuff that will help you create from the most simple apps to complex enterprise-level applications.</p>\n<p>Our tutorials will be structured in chapters. Each chapter will have different lessons.</p>\n<p>We encourage you to put in practice everything you learn. This way you will remember it better in the future.</p>\n<h1>Before you begin</h1>\n\n<p>This tutorial is focused on Meteor. We need to keep our concerns separated, this is why, it will assume that you already have\na JavaScript ES6 foundation.</p>\n<p>If you are not familiar with JavaScript at all:</p>\n<ul>\n<li><a href=\"https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy\" target=\"_blank\" rel=\"external\">https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></li>\n</ul>\n<p>If you are familiar with JS, but not with the ES6 syntax:</p>\n<ul>\n<li><a href=\"https://github.com/ericdouglas/ES6-Learning\" target=\"_blank\" rel=\"external\">https://github.com/ericdouglas/ES6-Learning</a></li>\n<li><a href=\"http://es6katas.org/\" target=\"_blank\" rel=\"external\">http://es6katas.org/</a></li>\n<li><a href=\"http://learnharmony.org/\" target=\"_blank\" rel=\"external\">http://learnharmony.org/</a></li>\n</ul>\n","excerpt":"","more":"<h1>Hello!</h1>\n\n<p>We are Cult of Coders, a young company focused on Meteor. We absolutely love it, and we only work with it.</p>\n<p>In the past years we gathered a lot of experience, Meteor has changed a lot, but it is now fully packed with lots\nof cool stuff that will help you create from the most simple apps to complex enterprise-level applications.</p>\n<p>Our tutorials will be structured in chapters. Each chapter will have different lessons.</p>\n<p>We encourage you to put in practice everything you learn. This way you will remember it better in the future.</p>\n<h1>Before you begin</h1>\n\n<p>This tutorial is focused on Meteor. We need to keep our concerns separated, this is why, it will assume that you already have\na JavaScript ES6 foundation.</p>\n<p>If you are not familiar with JavaScript at all:</p>\n<ul>\n<li><a href=\"https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy\">https://www.quora.com/What-are-the-best-online-resources-to-learn-JavaScript-programming-beyond-Coursera-Udacity-and-Udemy</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript</a></li>\n</ul>\n<p>If you are familiar with JS, but not with the ES6 syntax:</p>\n<ul>\n<li><a href=\"https://github.com/ericdouglas/ES6-Learning\">https://github.com/ericdouglas/ES6-Learning</a></li>\n<li><a href=\"http://es6katas.org/\">http://es6katas.org/</a></li>\n<li><a href=\"http://learnharmony.org/\">http://learnharmony.org/</a></li>\n</ul>\n"},{"title":"Publications & Subscriptions","description":"The Meteor's way of building reactive apps","_content":"\nHey there, you seem tenacious, it seems that Methods did not put you down, and you continued, I like that.\n\n## Pub/Sub System\n\nThe first step in understand the pub/sub system in Meteor, is to understand what a pub/sub system is in the first place.\n\nBasically, it's a communication system, where the \"publishers\" sends messages to the \"subscribers\".\n\nLet me give you an example, you have a chat application, // TODO: make it work\n\n## Publishing in Meteor\n\n```\nimport { Meteor } from 'meteor/meteor';\nimport Donuts from '/imports/api/donuts/collection';\n\nMeteor.publish('donuts', function () {\n    return Donuts.find();\n})\n```\n\nHmm, wait, why didn't we returned the elements directly, where is `.fetch()` in this equation ?\n\nIt's because a publication needs to return:\n1. A cursor\n2. An array of cursors\n\nYou can create custom publications and enable reactivity for anything you want (not only collections), \nbut this is for advanced stuff.\n\n## What is a cursor ?\n\nA good way to think about a cursor is to think of it as an \"address\". In the example above, we returned an address\nto all Donuts.\n\nA publication basically says to the client:\nHey man, I allow you access to this data.\n\nQ: Wait, isn't that what methods also do ?\n\nA: Yes, but with publication we benefit of reactivity and we'll discover how this works next.\n\nQ: Ok, so when should I use methods and when pub/sub ?\n\nA: ...\n\n## Subscribing to a publication\n\nSo, publishing says \"I give you access to this\", subscribing says \"I want access to that data\".\n\nYou noticed that when we created our publication, we first passed a string, 'donuts'. And we need to use\nthat same string in order to subscribe to it.\n\nGo to http://localhost:3000 and open your console:\n```\nvar handler = Meteor.subscribe('donuts');\n```\n\nThe handler contains:\n- subscriptionId : which is a unique identifier for your subscription\n- ready() : a function that returns true, if the subscription is ready\n```\nhandler.ready(); // should return true\n```\n- stop() : stop the subscription\n\nWhen a subscription is ready, basically it means that the server got your request, and it will fill the data.\n\nHow do we get the data is very very interesting, but we need to understand Client-Side collections first. But before that! \nLet's see how we can access these modules from our browser.\n\n## Accessing modules from the Client\n\nIn any client file you can import anything you want.\n```\n// file: /imports/startup/client/index.js\nimport '/imports/api/donuts/collection.js';\n```\n\nFor now, we imported it in the `/imports/startup/client/index.js` file because it's the way of Meteor saying:\n`Ok, I allow access to this module in the browser`\n\nIf that wasn't the case, we would have all of our modules accessible from the browser, which we definitely don't want.\n\n```\n// browser console:\nconst Donuts = require('/imports/api/donuts/collection.js').default\n```\n\nWait what ? `require()` ? I thought we use imports.\n\nThe `import` syntax does not work in the browser, but we have the require function, which basically does the same thing, but a bit differently, \nand because we `export default` the collection, to access it we need to access the `default` key inside the returned object by require()\n\nIf we would've done something like:\n\n```\n// file: /imports/api/donuts/collection.js\n... \nexport {Donuts}\n```\n\nThen the require would look like:\n\n```\n// client-side\nconst Donuts = require('/imports/api/donuts/collection.js').Donuts\n```\n\nConfused yet?\n\nCome on, it's not that hard, give it a try! Hint: try it without importing it in the `/imports/startup/client/index.js` file, see what happens.\n\nThe reason we don't dive into creating client-side files, is because we don't want to touch the `View Layer` just yet. That's something for the next chapter.\n\n## Client-side Collections\n\n```\nconst Donuts = require('/imports/api/donuts/collection.js').default\n```\n\nIt's got the same API. You can do insert(), update(), remove() but we will discuss later why this is not recommended, even if it is possible,\nand it may seem like the easiest way to do, in the long-run it is not, for now we will keep the focus only on finding elements\n\nNow that we got access to our collection, let's do:\n```\n// Meteor, give me my donuts:\nMeteor.subscribe('donuts')\n\n// wait for 1-2 seconds\nDonuts.find().fetch()\n```\n\nNow go open a *meteor shell* and try inserting a new document in Donuts collection. Come back to the browser, and do the fetch() again.\n\nYou should see your element there!\nWow! Cool. But you mentioned something about reactivity ?\n\nCursors are reactive data sources, and we can track reactive data sources using the tracker:\n\n```\nTracker.autorun(() => {\n    console.log(Donuts.find().fetch());\n})\n```\n\nNow everytime something in the \"address\" changes, like a new element is inserted, or updated, or removed. Meteor will communicate that to you, because you subscribed to that, and the cursor will change.\n\nThis will allow you to build reactive web pages with absolute ease. You simply track changes, and when changes are made, you do something in the UI.\n\nThis is the most barebones, straight forward way of showing you how Meteor's reactivity works. \nIt is magical, and it the way it works is absolutely genious, but! we shouldn't really discuss this right now,\nyou don't have to understand how electricity works in order to use it right ?\n\nThis chapter's focus is on getting you going with Meteor.\n\n\n\n \n\n\n\n\n\n","source":"chapters/1/pubsub.md","raw":"---\ntitle: Publications & Subscriptions\ndescription: The Meteor's way of building reactive apps\n---\n\nHey there, you seem tenacious, it seems that Methods did not put you down, and you continued, I like that.\n\n## Pub/Sub System\n\nThe first step in understand the pub/sub system in Meteor, is to understand what a pub/sub system is in the first place.\n\nBasically, it's a communication system, where the \"publishers\" sends messages to the \"subscribers\".\n\nLet me give you an example, you have a chat application, // TODO: make it work\n\n## Publishing in Meteor\n\n```\nimport { Meteor } from 'meteor/meteor';\nimport Donuts from '/imports/api/donuts/collection';\n\nMeteor.publish('donuts', function () {\n    return Donuts.find();\n})\n```\n\nHmm, wait, why didn't we returned the elements directly, where is `.fetch()` in this equation ?\n\nIt's because a publication needs to return:\n1. A cursor\n2. An array of cursors\n\nYou can create custom publications and enable reactivity for anything you want (not only collections), \nbut this is for advanced stuff.\n\n## What is a cursor ?\n\nA good way to think about a cursor is to think of it as an \"address\". In the example above, we returned an address\nto all Donuts.\n\nA publication basically says to the client:\nHey man, I allow you access to this data.\n\nQ: Wait, isn't that what methods also do ?\n\nA: Yes, but with publication we benefit of reactivity and we'll discover how this works next.\n\nQ: Ok, so when should I use methods and when pub/sub ?\n\nA: ...\n\n## Subscribing to a publication\n\nSo, publishing says \"I give you access to this\", subscribing says \"I want access to that data\".\n\nYou noticed that when we created our publication, we first passed a string, 'donuts'. And we need to use\nthat same string in order to subscribe to it.\n\nGo to http://localhost:3000 and open your console:\n```\nvar handler = Meteor.subscribe('donuts');\n```\n\nThe handler contains:\n- subscriptionId : which is a unique identifier for your subscription\n- ready() : a function that returns true, if the subscription is ready\n```\nhandler.ready(); // should return true\n```\n- stop() : stop the subscription\n\nWhen a subscription is ready, basically it means that the server got your request, and it will fill the data.\n\nHow do we get the data is very very interesting, but we need to understand Client-Side collections first. But before that! \nLet's see how we can access these modules from our browser.\n\n## Accessing modules from the Client\n\nIn any client file you can import anything you want.\n```\n// file: /imports/startup/client/index.js\nimport '/imports/api/donuts/collection.js';\n```\n\nFor now, we imported it in the `/imports/startup/client/index.js` file because it's the way of Meteor saying:\n`Ok, I allow access to this module in the browser`\n\nIf that wasn't the case, we would have all of our modules accessible from the browser, which we definitely don't want.\n\n```\n// browser console:\nconst Donuts = require('/imports/api/donuts/collection.js').default\n```\n\nWait what ? `require()` ? I thought we use imports.\n\nThe `import` syntax does not work in the browser, but we have the require function, which basically does the same thing, but a bit differently, \nand because we `export default` the collection, to access it we need to access the `default` key inside the returned object by require()\n\nIf we would've done something like:\n\n```\n// file: /imports/api/donuts/collection.js\n... \nexport {Donuts}\n```\n\nThen the require would look like:\n\n```\n// client-side\nconst Donuts = require('/imports/api/donuts/collection.js').Donuts\n```\n\nConfused yet?\n\nCome on, it's not that hard, give it a try! Hint: try it without importing it in the `/imports/startup/client/index.js` file, see what happens.\n\nThe reason we don't dive into creating client-side files, is because we don't want to touch the `View Layer` just yet. That's something for the next chapter.\n\n## Client-side Collections\n\n```\nconst Donuts = require('/imports/api/donuts/collection.js').default\n```\n\nIt's got the same API. You can do insert(), update(), remove() but we will discuss later why this is not recommended, even if it is possible,\nand it may seem like the easiest way to do, in the long-run it is not, for now we will keep the focus only on finding elements\n\nNow that we got access to our collection, let's do:\n```\n// Meteor, give me my donuts:\nMeteor.subscribe('donuts')\n\n// wait for 1-2 seconds\nDonuts.find().fetch()\n```\n\nNow go open a *meteor shell* and try inserting a new document in Donuts collection. Come back to the browser, and do the fetch() again.\n\nYou should see your element there!\nWow! Cool. But you mentioned something about reactivity ?\n\nCursors are reactive data sources, and we can track reactive data sources using the tracker:\n\n```\nTracker.autorun(() => {\n    console.log(Donuts.find().fetch());\n})\n```\n\nNow everytime something in the \"address\" changes, like a new element is inserted, or updated, or removed. Meteor will communicate that to you, because you subscribed to that, and the cursor will change.\n\nThis will allow you to build reactive web pages with absolute ease. You simply track changes, and when changes are made, you do something in the UI.\n\nThis is the most barebones, straight forward way of showing you how Meteor's reactivity works. \nIt is magical, and it the way it works is absolutely genious, but! we shouldn't really discuss this right now,\nyou don't have to understand how electricity works in order to use it right ?\n\nThis chapter's focus is on getting you going with Meteor.\n\n\n\n \n\n\n\n\n\n","date":"2016-10-29T07:03:48.873Z","updated":"2016-10-29T07:03:48.869Z","path":"chapters/1/pubsub.html","_id":"ciusadl2x0000ftjxliw7ap6p","comments":1,"layout":"page","content":"<p>Hey there, you seem tenacious, it seems that Methods did not put you down, and you continued, I like that.</p>\n<h2 id=\"Pub-Sub-System\"><a href=\"#Pub-Sub-System\" class=\"headerlink\" title=\"Pub/Sub System\"></a>Pub/Sub System</h2><p>The first step in understand the pub/sub system in Meteor, is to understand what a pub/sub system is in the first place.</p>\n<p>Basically, it’s a communication system, where the “publishers” sends messages to the “subscribers”.</p>\n<p>Let me give you an example, you have a chat application, // TODO: make it work</p>\n<h2 id=\"Publishing-in-Meteor\"><a href=\"#Publishing-in-Meteor\" class=\"headerlink\" title=\"Publishing in Meteor\"></a>Publishing in Meteor</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'donuts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Donuts.find();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Hmm, wait, why didn’t we returned the elements directly, where is <code>.fetch()</code> in this equation ?</p>\n<p>It’s because a publication needs to return:</p>\n<ol>\n<li>A cursor</li>\n<li>An array of cursors</li>\n</ol>\n<p>You can create custom publications and enable reactivity for anything you want (not only collections), \nbut this is for advanced stuff.</p>\n<h2 id=\"What-is-a-cursor\"><a href=\"#What-is-a-cursor\" class=\"headerlink\" title=\"What is a cursor ?\"></a>What is a cursor ?</h2><p>A good way to think about a cursor is to think of it as an “address”. In the example above, we returned an address\nto all Donuts.</p>\n<p>A publication basically says to the client:\nHey man, I allow you access to this data.</p>\n<p>Q: Wait, isn’t that what methods also do ?</p>\n<p>A: Yes, but with publication we benefit of reactivity and we’ll discover how this works next.</p>\n<p>Q: Ok, so when should I use methods and when pub/sub ?</p>\n<p>A: …</p>\n<h2 id=\"Subscribing-to-a-publication\"><a href=\"#Subscribing-to-a-publication\" class=\"headerlink\" title=\"Subscribing to a publication\"></a>Subscribing to a publication</h2><p>So, publishing says “I give you access to this”, subscribing says “I want access to that data”.</p>\n<p>You noticed that when we created our publication, we first passed a string, ‘donuts’. And we need to use\nthat same string in order to subscribe to it.</p>\n<p>Go to <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a> and open your console:\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">var handler</span> = Meteor.subscribe(<span class=\"string\">'donuts'</span>);</div></pre></td></tr></table></figure></p>\n<p>The handler contains:</p>\n<ul>\n<li>subscriptionId : which is a unique identifier for your subscription</li>\n<li><p>ready() : a function that returns true, if the subscription is ready</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler.<span class=\"built_in\">ready</span>(); <span class=\"comment\">// should return true</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>stop() : stop the subscription</p>\n</li>\n</ul>\n<p>When a subscription is ready, basically it means that the server got your request, and it will fill the data.</p>\n<p>How do we get the data is very very interesting, but we need to understand Client-Side collections first. But before that! \nLet’s see how we can access these modules from our browser.</p>\n<h2 id=\"Accessing-modules-from-the-Client\"><a href=\"#Accessing-modules-from-the-Client\" class=\"headerlink\" title=\"Accessing modules from the Client\"></a>Accessing modules from the Client</h2><p>In any client file you can import anything you want.\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> file: <span class=\"regexp\">/imports/</span>startup<span class=\"regexp\">/client/i</span>ndex.js</div><div class=\"line\">import <span class=\"string\">'/imports/api/donuts/collection.js'</span>;</div></pre></td></tr></table></figure></p>\n<p>For now, we imported it in the <code>/imports/startup/client/index.js</code> file because it’s the way of Meteor saying:\n<code>Ok, I allow access to this module in the browser</code></p>\n<p>If that wasn’t the case, we would have all of our modules accessible from the browser, which we definitely don’t want.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// browser console:</span></div><div class=\"line\"><span class=\"keyword\">const</span> Donuts = <span class=\"keyword\">require</span>(<span class=\"string\">'/imports/api/donuts/collection.js'</span>).<span class=\"keyword\">default</span></div></pre></td></tr></table></figure>\n<p>Wait what ? <code>require()</code> ? I thought we use imports.</p>\n<p>The <code>import</code> syntax does not work in the browser, but we have the require function, which basically does the same thing, but a bit differently, \nand because we <code>export default</code> the collection, to access it we need to access the <code>default</code> key inside the returned object by require()</p>\n<p>If we would’ve done something like:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> file: <span class=\"regexp\">/imports/</span>api<span class=\"regexp\">/donuts/</span>collection.js</div><div class=\"line\">... </div><div class=\"line\">export &#123;Donuts&#125;</div></pre></td></tr></table></figure>\n<p>Then the require would look like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// client-side</span></div><div class=\"line\"><span class=\"keyword\">const</span> Donuts = <span class=\"built_in\">require</span>(<span class=\"string\">'/imports/api/donuts/collection.js'</span>).Donuts</div></pre></td></tr></table></figure>\n<p>Confused yet?</p>\n<p>Come on, it’s not that hard, give it a try! Hint: try it without importing it in the <code>/imports/startup/client/index.js</code> file, see what happens.</p>\n<p>The reason we don’t dive into creating client-side files, is because we don’t want to touch the <code>View Layer</code> just yet. That’s something for the next chapter.</p>\n<h2 id=\"Client-side-Collections\"><a href=\"#Client-side-Collections\" class=\"headerlink\" title=\"Client-side Collections\"></a>Client-side Collections</h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Donuts = <span class=\"built_in\">require</span>(<span class=\"string\">'/imports/api/donuts/collection.js'</span>).<span class=\"keyword\">default</span></div></pre></td></tr></table></figure>\n<p>It’s got the same API. You can do insert(), update(), remove() but we will discuss later why this is not recommended, even if it is possible,\nand it may seem like the easiest way to do, in the long-run it is not, for now we will keep the focus only on finding elements</p>\n<p>Now that we got access to our collection, let’s do:\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Meteor, give me my donuts:</span></div><div class=\"line\"><span class=\"selector-tag\">Meteor</span><span class=\"selector-class\">.subscribe</span>(<span class=\"string\">'donuts'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// wait for 1-2 seconds</span></div><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.fetch</span>()</div></pre></td></tr></table></figure></p>\n<p>Now go open a <em>meteor shell</em> and try inserting a new document in Donuts collection. Come back to the browser, and do the fetch() again.</p>\n<p>You should see your element there!\nWow! Cool. But you mentioned something about reactivity ?</p>\n<p>Cursors are reactive data sources, and we can track reactive data sources using the tracker:</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tracker.autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(Donuts.find().fetch());</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now everytime something in the “address” changes, like a new element is inserted, or updated, or removed. Meteor will communicate that to you, because you subscribed to that, and the cursor will change.</p>\n<p>This will allow you to build reactive web pages with absolute ease. You simply track changes, and when changes are made, you do something in the UI.</p>\n<p>This is the most barebones, straight forward way of showing you how Meteor’s reactivity works. \nIt is magical, and it the way it works is absolutely genious, but! we shouldn’t really discuss this right now,\nyou don’t have to understand how electricity works in order to use it right ?</p>\n<p>This chapter’s focus is on getting you going with Meteor.</p>\n","excerpt":"","more":"<p>Hey there, you seem tenacious, it seems that Methods did not put you down, and you continued, I like that.</p>\n<h2 id=\"Pub-Sub-System\"><a href=\"#Pub-Sub-System\" class=\"headerlink\" title=\"Pub/Sub System\"></a>Pub/Sub System</h2><p>The first step in understand the pub/sub system in Meteor, is to understand what a pub/sub system is in the first place.</p>\n<p>Basically, it’s a communication system, where the “publishers” sends messages to the “subscribers”.</p>\n<p>Let me give you an example, you have a chat application, // TODO: make it work</p>\n<h2 id=\"Publishing-in-Meteor\"><a href=\"#Publishing-in-Meteor\" class=\"headerlink\" title=\"Publishing in Meteor\"></a>Publishing in Meteor</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'donuts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Donuts.find();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Hmm, wait, why didn’t we returned the elements directly, where is <code>.fetch()</code> in this equation ?</p>\n<p>It’s because a publication needs to return:</p>\n<ol>\n<li>A cursor</li>\n<li>An array of cursors</li>\n</ol>\n<p>You can create custom publications and enable reactivity for anything you want (not only collections), \nbut this is for advanced stuff.</p>\n<h2 id=\"What-is-a-cursor\"><a href=\"#What-is-a-cursor\" class=\"headerlink\" title=\"What is a cursor ?\"></a>What is a cursor ?</h2><p>A good way to think about a cursor is to think of it as an “address”. In the example above, we returned an address\nto all Donuts.</p>\n<p>A publication basically says to the client:\nHey man, I allow you access to this data.</p>\n<p>Q: Wait, isn’t that what methods also do ?</p>\n<p>A: Yes, but with publication we benefit of reactivity and we’ll discover how this works next.</p>\n<p>Q: Ok, so when should I use methods and when pub/sub ?</p>\n<p>A: …</p>\n<h2 id=\"Subscribing-to-a-publication\"><a href=\"#Subscribing-to-a-publication\" class=\"headerlink\" title=\"Subscribing to a publication\"></a>Subscribing to a publication</h2><p>So, publishing says “I give you access to this”, subscribing says “I want access to that data”.</p>\n<p>You noticed that when we created our publication, we first passed a string, ‘donuts’. And we need to use\nthat same string in order to subscribe to it.</p>\n<p>Go to <a href=\"http://localhost:3000\">http://localhost:3000</a> and open your console:\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">var handler</span> = Meteor.subscribe(<span class=\"string\">'donuts'</span>);</div></pre></td></tr></table></figure></p>\n<p>The handler contains:</p>\n<ul>\n<li>subscriptionId : which is a unique identifier for your subscription</li>\n<li><p>ready() : a function that returns true, if the subscription is ready</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler.<span class=\"built_in\">ready</span>(); <span class=\"comment\">// should return true</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>stop() : stop the subscription</p>\n</li>\n</ul>\n<p>When a subscription is ready, basically it means that the server got your request, and it will fill the data.</p>\n<p>How do we get the data is very very interesting, but we need to understand Client-Side collections first. But before that! \nLet’s see how we can access these modules from our browser.</p>\n<h2 id=\"Accessing-modules-from-the-Client\"><a href=\"#Accessing-modules-from-the-Client\" class=\"headerlink\" title=\"Accessing modules from the Client\"></a>Accessing modules from the Client</h2><p>In any client file you can import anything you want.\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> file: <span class=\"regexp\">/imports/</span>startup<span class=\"regexp\">/client/i</span>ndex.js</div><div class=\"line\">import <span class=\"string\">'/imports/api/donuts/collection.js'</span>;</div></pre></td></tr></table></figure></p>\n<p>For now, we imported it in the <code>/imports/startup/client/index.js</code> file because it’s the way of Meteor saying:\n<code>Ok, I allow access to this module in the browser</code></p>\n<p>If that wasn’t the case, we would have all of our modules accessible from the browser, which we definitely don’t want.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// browser console:</span></div><div class=\"line\"><span class=\"keyword\">const</span> Donuts = <span class=\"keyword\">require</span>(<span class=\"string\">'/imports/api/donuts/collection.js'</span>).<span class=\"keyword\">default</span></div></pre></td></tr></table></figure>\n<p>Wait what ? <code>require()</code> ? I thought we use imports.</p>\n<p>The <code>import</code> syntax does not work in the browser, but we have the require function, which basically does the same thing, but a bit differently, \nand because we <code>export default</code> the collection, to access it we need to access the <code>default</code> key inside the returned object by require()</p>\n<p>If we would’ve done something like:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"regexp\">//</span> file: <span class=\"regexp\">/imports/</span>api<span class=\"regexp\">/donuts/</span>collection.js</div><div class=\"line\">... </div><div class=\"line\">export &#123;Donuts&#125;</div></pre></td></tr></table></figure>\n<p>Then the require would look like:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// client-side</span></div><div class=\"line\"><span class=\"keyword\">const</span> Donuts = <span class=\"built_in\">require</span>(<span class=\"string\">'/imports/api/donuts/collection.js'</span>).Donuts</div></pre></td></tr></table></figure>\n<p>Confused yet?</p>\n<p>Come on, it’s not that hard, give it a try! Hint: try it without importing it in the <code>/imports/startup/client/index.js</code> file, see what happens.</p>\n<p>The reason we don’t dive into creating client-side files, is because we don’t want to touch the <code>View Layer</code> just yet. That’s something for the next chapter.</p>\n<h2 id=\"Client-side-Collections\"><a href=\"#Client-side-Collections\" class=\"headerlink\" title=\"Client-side Collections\"></a>Client-side Collections</h2><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Donuts = <span class=\"built_in\">require</span>(<span class=\"string\">'/imports/api/donuts/collection.js'</span>).<span class=\"keyword\">default</span></div></pre></td></tr></table></figure>\n<p>It’s got the same API. You can do insert(), update(), remove() but we will discuss later why this is not recommended, even if it is possible,\nand it may seem like the easiest way to do, in the long-run it is not, for now we will keep the focus only on finding elements</p>\n<p>Now that we got access to our collection, let’s do:\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Meteor, give me my donuts:</span></div><div class=\"line\"><span class=\"selector-tag\">Meteor</span><span class=\"selector-class\">.subscribe</span>(<span class=\"string\">'donuts'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// wait for 1-2 seconds</span></div><div class=\"line\"><span class=\"selector-tag\">Donuts</span><span class=\"selector-class\">.find</span>()<span class=\"selector-class\">.fetch</span>()</div></pre></td></tr></table></figure></p>\n<p>Now go open a <em>meteor shell</em> and try inserting a new document in Donuts collection. Come back to the browser, and do the fetch() again.</p>\n<p>You should see your element there!\nWow! Cool. But you mentioned something about reactivity ?</p>\n<p>Cursors are reactive data sources, and we can track reactive data sources using the tracker:</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Tracker.autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(Donuts.find().fetch());</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now everytime something in the “address” changes, like a new element is inserted, or updated, or removed. Meteor will communicate that to you, because you subscribed to that, and the cursor will change.</p>\n<p>This will allow you to build reactive web pages with absolute ease. You simply track changes, and when changes are made, you do something in the UI.</p>\n<p>This is the most barebones, straight forward way of showing you how Meteor’s reactivity works. \nIt is magical, and it the way it works is absolutely genious, but! we shouldn’t really discuss this right now,\nyou don’t have to understand how electricity works in order to use it right ?</p>\n<p>This chapter’s focus is on getting you going with Meteor.</p>\n"},{"title":"Tracker","description":"The Meteor's way of building reactive apps","_content":"\nLet's now explore a nice concept for Meteor, the Tracker system.\n\nQ: I'm getting sick and tired of this. I'm a web dev, I don't want to see things in my console no more..\n\nA: Man, it's like Mister Myiagi trying to coach karate kid, once we reach the level on making everything work in a page, you'll be a master and you'll flow through it,\nbare with me, this is the best way to take you to the learning curve.\n\n```\n// in your terminal do:\nmeteor add tracker reactive-var\n```\n\nThe tracker system only works client-side. So open up your browser:\n\n```\nvar a = new ReactiveVar('a default value');\na.get() // will display 'a default value'\na.set('some other value')\na.get() // will display 'some other value'\n```\n\nNothing fancy, what's the deal with this ?\n\nReactiveVar is a reactive-data source and you can follow it's changes. To be able to follow the changes we'll be using our infamous *Tracker*\n\n```\nvar computation = Tracker.autorun(() => {\n    // this is the run function\n    console.log(a.get())\n})\n```\n\nNow each time you set some value to it, it will get *console.log*ed\n\nDoing:\n```\ncomputation.stop()\n```\n\nWill stop the computation, so now if you set values to your data source, the run function will no longer execute.\n\nLet's recap, we can track changes to reactive data sources, using Tracker. That's all you need to know for now, to get you\ngoing to the next step.\n\nTracker has many interesting things about it. Read more:\n- https://docs.meteor.com/api/tracker.html\n\n\nHomework:\n\n- Create a tracker that will stop after 5th time it entered the computation\n- Find out what's ReactiveDict and play with it :)","source":"chapters/1/reactivity.md","raw":"---\ntitle: Tracker\ndescription: The Meteor's way of building reactive apps\n---\n\nLet's now explore a nice concept for Meteor, the Tracker system.\n\nQ: I'm getting sick and tired of this. I'm a web dev, I don't want to see things in my console no more..\n\nA: Man, it's like Mister Myiagi trying to coach karate kid, once we reach the level on making everything work in a page, you'll be a master and you'll flow through it,\nbare with me, this is the best way to take you to the learning curve.\n\n```\n// in your terminal do:\nmeteor add tracker reactive-var\n```\n\nThe tracker system only works client-side. So open up your browser:\n\n```\nvar a = new ReactiveVar('a default value');\na.get() // will display 'a default value'\na.set('some other value')\na.get() // will display 'some other value'\n```\n\nNothing fancy, what's the deal with this ?\n\nReactiveVar is a reactive-data source and you can follow it's changes. To be able to follow the changes we'll be using our infamous *Tracker*\n\n```\nvar computation = Tracker.autorun(() => {\n    // this is the run function\n    console.log(a.get())\n})\n```\n\nNow each time you set some value to it, it will get *console.log*ed\n\nDoing:\n```\ncomputation.stop()\n```\n\nWill stop the computation, so now if you set values to your data source, the run function will no longer execute.\n\nLet's recap, we can track changes to reactive data sources, using Tracker. That's all you need to know for now, to get you\ngoing to the next step.\n\nTracker has many interesting things about it. Read more:\n- https://docs.meteor.com/api/tracker.html\n\n\nHomework:\n\n- Create a tracker that will stop after 5th time it entered the computation\n- Find out what's ReactiveDict and play with it :)","date":"2016-10-27T15:57:08.170Z","updated":"2016-10-27T15:57:08.166Z","path":"chapters/1/reactivity.html","_id":"ciusg1bo40000lrjxv0qz6i9k","comments":1,"layout":"page","content":"<p>Let’s now explore a nice concept for Meteor, the Tracker system.</p>\n<p>Q: I’m getting sick and tired of this. I’m a web dev, I don’t want to see things in my console no more..</p>\n<p>A: Man, it’s like Mister Myiagi trying to coach karate kid, once we reach the level on making everything work in a page, you’ll be a master and you’ll flow through it,\nbare with me, this is the best way to take you to the learning curve.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your terminal do:</span></div><div class=\"line\">meteor <span class=\"keyword\">add</span> tracker reactive-<span class=\"keyword\">var</span></div></pre></td></tr></table></figure>\n<p>The tracker system only works client-side. So open up your browser:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ReactiveVar(<span class=\"string\">'a default value'</span>);</div><div class=\"line\">a.<span class=\"keyword\">get</span>() <span class=\"comment\">// will display 'a default value'</span></div><div class=\"line\">a.<span class=\"keyword\">set</span>(<span class=\"string\">'some other value'</span>)</div><div class=\"line\">a.<span class=\"keyword\">get</span>() <span class=\"comment\">// will display 'some other value'</span></div></pre></td></tr></table></figure>\n<p>Nothing fancy, what’s the deal with this ?</p>\n<p>ReactiveVar is a reactive-data source and you can follow it’s changes. To be able to follow the changes we’ll be using our infamous <em>Tracker</em></p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var computation = Tracker.autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"regexp\">//</span> <span class=\"keyword\">this</span> <span class=\"keyword\">is</span> the run function</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a.get())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now each time you set some value to it, it will get <em>console.log</em>ed</p>\n<p>Doing:\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">computation.<span class=\"built_in\">stop</span>()</div></pre></td></tr></table></figure></p>\n<p>Will stop the computation, so now if you set values to your data source, the run function will no longer execute.</p>\n<p>Let’s recap, we can track changes to reactive data sources, using Tracker. That’s all you need to know for now, to get you\ngoing to the next step.</p>\n<p>Tracker has many interesting things about it. Read more:</p>\n<ul>\n<li><a href=\"https://docs.meteor.com/api/tracker.html\" target=\"_blank\" rel=\"external\">https://docs.meteor.com/api/tracker.html</a></li>\n</ul>\n<p>Homework:</p>\n<ul>\n<li>Create a tracker that will stop after 5th time it entered the computation</li>\n<li>Find out what’s ReactiveDict and play with it :)</li>\n</ul>\n","excerpt":"","more":"<p>Let’s now explore a nice concept for Meteor, the Tracker system.</p>\n<p>Q: I’m getting sick and tired of this. I’m a web dev, I don’t want to see things in my console no more..</p>\n<p>A: Man, it’s like Mister Myiagi trying to coach karate kid, once we reach the level on making everything work in a page, you’ll be a master and you’ll flow through it,\nbare with me, this is the best way to take you to the learning curve.</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your terminal do:</span></div><div class=\"line\">meteor <span class=\"keyword\">add</span> tracker reactive-<span class=\"keyword\">var</span></div></pre></td></tr></table></figure>\n<p>The tracker system only works client-side. So open up your browser:</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ReactiveVar(<span class=\"string\">'a default value'</span>);</div><div class=\"line\">a.<span class=\"keyword\">get</span>() <span class=\"comment\">// will display 'a default value'</span></div><div class=\"line\">a.<span class=\"keyword\">set</span>(<span class=\"string\">'some other value'</span>)</div><div class=\"line\">a.<span class=\"keyword\">get</span>() <span class=\"comment\">// will display 'some other value'</span></div></pre></td></tr></table></figure>\n<p>Nothing fancy, what’s the deal with this ?</p>\n<p>ReactiveVar is a reactive-data source and you can follow it’s changes. To be able to follow the changes we’ll be using our infamous <em>Tracker</em></p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var computation = Tracker.autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"regexp\">//</span> <span class=\"keyword\">this</span> <span class=\"keyword\">is</span> the run function</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a.get())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now each time you set some value to it, it will get <em>console.log</em>ed</p>\n<p>Doing:\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">computation.<span class=\"built_in\">stop</span>()</div></pre></td></tr></table></figure></p>\n<p>Will stop the computation, so now if you set values to your data source, the run function will no longer execute.</p>\n<p>Let’s recap, we can track changes to reactive data sources, using Tracker. That’s all you need to know for now, to get you\ngoing to the next step.</p>\n<p>Tracker has many interesting things about it. Read more:</p>\n<ul>\n<li><a href=\"https://docs.meteor.com/api/tracker.html\">https://docs.meteor.com/api/tracker.html</a></li>\n</ul>\n<p>Homework:</p>\n<ul>\n<li>Create a tracker that will stop after 5th time it entered the computation</li>\n<li>Find out what’s ReactiveDict and play with it :)</li>\n</ul>\n"},{"title":"Accounts","description":"How Meteor handles users","_content":"\nOh, hello again, so Meteor has a very opinionated way on doing this stuff, and it offers very friendly and dead simple APIs for:\n\n- Creating an user\n- Login (Password, Facebook, Google, ...)\n- Forgot Password\n- Change Password\n- Reset Password\n\nIn this episode we'll focus more on using it with passwords, but we'll also show you how easy it is to integrate it with other systems.\n\n```\nmeteor add accounts-base accounts-password\n```\n\nOpen your server-side shell and type:\n\n```\nAccounts.createUser({\n    email: 'donut@lover.com', \n    password: '12345'\n})\n```\n\nUsers are stored in a collection. You can access this collection via `Meteor.users`. \nIt's the same kind of collection that we learned about in the past chapters.\n\nNow go to your browser's console:\n\n```\nMeteor.loginWithPassword('donut@lover.com', '12345', function (err) {\n    if (!err) {\n        console.log('I was called because authentication was a success')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nBam! You're logged in.\n\n```\n// in browser console:\nMeteor.user() // will return the current logged in user\nMeteor.userId() // will return the _id of the current logged in user\n```\n\n`Meteor.user()` is a reactive data source, so if you use it in a Tracker, then you will benefit from it's reactivity,\nmeaning you can show some stuff for logged in users, and hide for anonymous ones.\n\nAnother thing you may notice is how `emails` key is structured:\n```\n[\n    {\n        address: 'donut@lover.com',\n        verified: true|false\n    }\n]\n```\n\nThis may seem a bit complicated, but they decided to stick with this, maybe because they wanted to satisfy easily the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n```\nMeteor.user().emails[0].address\n```\n\nBut don't worry about this now, when we'll learn how to make this easy, so you won't have to type this everywhere you need an user's email.\n\nYou think '12345' is not a very secure password, and you are correct, let's change it:\n\n```\nAccounts.changePassword('12345', 'My1337L333Tpasswurt%', function (err) {\n    if (!err) {\n        console.log('Change password was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nVery nice, now let's try a logout:\n\n```\nMeteor.logout(function (err) {\n    if (!err) {\n        console.log('Logout was a success!')\n    } else {\n        console.log(err);\n    }\n});\n// now Meteor.user() and Meteor.userId() will be null\n```\n\nNext time you login, you'll login with your new password.\n\nBtw, the callbacks we used in `loginWithPassword`, `changePassword` and `logout` are optional, you can simply not use it.\n\nBut wait, your new password is so complex, you already forgot it.\n\n```\nAccounts.forgotPassword({ email: 'donut@lover.com' })\n```\n\nNow check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n```\nhttp://localhost:3000/#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7\n```\n\nThe last part is your token.\n\n```\nAccounts.resetPassword('eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7', 'NewPassword123', function (err) {\n    if (!err) {\n        console.log('Password reset was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nBam!\nWhat if you want registration, but with mail confirmation ?\n\nGo to your meteor shell:\n```\nAccounts.createUser({\n    email: 'user@withoutPassword.com'\n})\n\n// it returns the newly created _id\n\nAccounts.sendEnrollmentEmail(_id);\n```\n\nNow go to where you started meteor and check the email out.\nGet the token and set a new password using `Accounts.resetPassword()`\n\nEmails are customizable:\nhttp://docs.meteor.com/api/passwords.html#Accounts-emailTemplates\n\nRead more about other cool stuff here:\nhttp://docs.meteor.com/api/passwords.html\n\nThat's a short intro into the account system. Isn't it super-duper easy ?\n\nLogin with Facebook, Google, Twitter, etc:\nhttps://guide.meteor.com/accounts.html#supported-login-services","source":"chapters/1/users.md","raw":"---\ntitle: Accounts\ndescription: How Meteor handles users\n---\n\nOh, hello again, so Meteor has a very opinionated way on doing this stuff, and it offers very friendly and dead simple APIs for:\n\n- Creating an user\n- Login (Password, Facebook, Google, ...)\n- Forgot Password\n- Change Password\n- Reset Password\n\nIn this episode we'll focus more on using it with passwords, but we'll also show you how easy it is to integrate it with other systems.\n\n```\nmeteor add accounts-base accounts-password\n```\n\nOpen your server-side shell and type:\n\n```\nAccounts.createUser({\n    email: 'donut@lover.com', \n    password: '12345'\n})\n```\n\nUsers are stored in a collection. You can access this collection via `Meteor.users`. \nIt's the same kind of collection that we learned about in the past chapters.\n\nNow go to your browser's console:\n\n```\nMeteor.loginWithPassword('donut@lover.com', '12345', function (err) {\n    if (!err) {\n        console.log('I was called because authentication was a success')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nBam! You're logged in.\n\n```\n// in browser console:\nMeteor.user() // will return the current logged in user\nMeteor.userId() // will return the _id of the current logged in user\n```\n\n`Meteor.user()` is a reactive data source, so if you use it in a Tracker, then you will benefit from it's reactivity,\nmeaning you can show some stuff for logged in users, and hide for anonymous ones.\n\nAnother thing you may notice is how `emails` key is structured:\n```\n[\n    {\n        address: 'donut@lover.com',\n        verified: true|false\n    }\n]\n```\n\nThis may seem a bit complicated, but they decided to stick with this, maybe because they wanted to satisfy easily the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n```\nMeteor.user().emails[0].address\n```\n\nBut don't worry about this now, when we'll learn how to make this easy, so you won't have to type this everywhere you need an user's email.\n\nYou think '12345' is not a very secure password, and you are correct, let's change it:\n\n```\nAccounts.changePassword('12345', 'My1337L333Tpasswurt%', function (err) {\n    if (!err) {\n        console.log('Change password was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nVery nice, now let's try a logout:\n\n```\nMeteor.logout(function (err) {\n    if (!err) {\n        console.log('Logout was a success!')\n    } else {\n        console.log(err);\n    }\n});\n// now Meteor.user() and Meteor.userId() will be null\n```\n\nNext time you login, you'll login with your new password.\n\nBtw, the callbacks we used in `loginWithPassword`, `changePassword` and `logout` are optional, you can simply not use it.\n\nBut wait, your new password is so complex, you already forgot it.\n\n```\nAccounts.forgotPassword({ email: 'donut@lover.com' })\n```\n\nNow check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n```\nhttp://localhost:3000/#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7\n```\n\nThe last part is your token.\n\n```\nAccounts.resetPassword('eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7', 'NewPassword123', function (err) {\n    if (!err) {\n        console.log('Password reset was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nBam!\nWhat if you want registration, but with mail confirmation ?\n\nGo to your meteor shell:\n```\nAccounts.createUser({\n    email: 'user@withoutPassword.com'\n})\n\n// it returns the newly created _id\n\nAccounts.sendEnrollmentEmail(_id);\n```\n\nNow go to where you started meteor and check the email out.\nGet the token and set a new password using `Accounts.resetPassword()`\n\nEmails are customizable:\nhttp://docs.meteor.com/api/passwords.html#Accounts-emailTemplates\n\nRead more about other cool stuff here:\nhttp://docs.meteor.com/api/passwords.html\n\nThat's a short intro into the account system. Isn't it super-duper easy ?\n\nLogin with Facebook, Google, Twitter, etc:\nhttps://guide.meteor.com/accounts.html#supported-login-services","date":"2016-10-27T15:55:43.009Z","updated":"2016-10-27T15:55:43.009Z","path":"chapters/1/users.html","_id":"ciushr1a10001lrjxef1x4k0v","comments":1,"layout":"page","content":"<p>Oh, hello again, so Meteor has a very opinionated way on doing this stuff, and it offers very friendly and dead simple APIs for:</p>\n<ul>\n<li>Creating an user</li>\n<li>Login (Password, Facebook, Google, …)</li>\n<li>Forgot Password</li>\n<li>Change Password</li>\n<li>Reset Password</li>\n</ul>\n<p>In this episode we’ll focus more on using it with passwords, but we’ll also show you how easy it is to integrate it with other systems.</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>accounts-<span class=\"keyword\">base </span>accounts-password</div></pre></td></tr></table></figure>\n<p>Open your server-side shell and type:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Accounts</span><span class=\"selector-class\">.createUser</span>(&#123;</div><div class=\"line\">    <span class=\"attribute\">email</span>: <span class=\"string\">'donut@lover.com'</span>, </div><div class=\"line\">    password: <span class=\"string\">'12345'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Users are stored in a collection. You can access this collection via <code>Meteor.users</code>. \nIt’s the same kind of collection that we learned about in the past chapters.</p>\n<p>Now go to your browser’s console:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.loginWithPassword(<span class=\"string\">'donut@lover.com'</span>, <span class=\"string\">'12345'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called because authentication was a success'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Bam! You’re logged in.</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in browser console:</span></div><div class=\"line\">Meteor.user<span class=\"comment\">()</span> <span class=\"comment\">// will return the current logged in user</span></div><div class=\"line\">Meteor.userId<span class=\"comment\">()</span> <span class=\"comment\">// will return the _id of the current logged in user</span></div></pre></td></tr></table></figure>\n<p><code>Meteor.user()</code> is a reactive data source, so if you use it in a Tracker, then you will benefit from it’s reactivity,\nmeaning you can show some stuff for logged in users, and hide for anonymous ones.</p>\n<p>Another thing you may notice is how <code>emails</code> key is structured:\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        address: 'donut@lover.com',</div><div class=\"line\">        verified: <span class=\"literal\">true</span>|<span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>This may seem a bit complicated, but they decided to stick with this, maybe because they wanted to satisfy easily the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Meteor</span><span class=\"selector-class\">.user</span>()<span class=\"selector-class\">.emails</span><span class=\"selector-attr\">[0]</span><span class=\"selector-class\">.address</span></div></pre></td></tr></table></figure></p>\n<p>But don’t worry about this now, when we’ll learn how to make this easy, so you won’t have to type this everywhere you need an user’s email.</p>\n<p>You think ‘12345’ is not a very secure password, and you are correct, let’s change it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.changePassword(<span class=\"string\">'12345'</span>, <span class=\"string\">'My1337L333Tpasswurt%'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Change password was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Very nice, now let’s try a logout:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.logout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Logout was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// now Meteor.user() and Meteor.userId() will be null</span></div></pre></td></tr></table></figure>\n<p>Next time you login, you’ll login with your new password.</p>\n<p>Btw, the callbacks we used in <code>loginWithPassword</code>, <code>changePassword</code> and <code>logout</code> are optional, you can simply not use it.</p>\n<p>But wait, your new password is so complex, you already forgot it.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Accounts</span><span class=\"selector-class\">.forgotPassword</span>(&#123; <span class=\"attribute\">email</span>: <span class=\"string\">'donut@lover.com'</span> &#125;)</div></pre></td></tr></table></figure>\n<p>Now check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>//localhost:<span class=\"number\">3000</span>/<span class=\"meta\">#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7</span></div></pre></td></tr></table></figure></p>\n<p>The last part is your token.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.resetPassword(<span class=\"string\">'eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7'</span>, <span class=\"string\">'NewPassword123'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Password reset was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Bam!\nWhat if you want registration, but with mail confirmation ?</p>\n<p>Go to your meteor shell:\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Accounts</span><span class=\"selector-class\">.createUser</span>(&#123;</div><div class=\"line\">    <span class=\"attribute\">email</span>: <span class=\"string\">'user@withoutPassword.com'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// it returns the newly created _id</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">Accounts</span><span class=\"selector-class\">.sendEnrollmentEmail</span>(_id);</div></pre></td></tr></table></figure></p>\n<p>Now go to where you started meteor and check the email out.\nGet the token and set a new password using <code>Accounts.resetPassword()</code></p>\n<p>Emails are customizable:\n<a href=\"http://docs.meteor.com/api/passwords.html#Accounts-emailTemplates\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/passwords.html#Accounts-emailTemplates</a></p>\n<p>Read more about other cool stuff here:\n<a href=\"http://docs.meteor.com/api/passwords.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/passwords.html</a></p>\n<p>That’s a short intro into the account system. Isn’t it super-duper easy ?</p>\n<p>Login with Facebook, Google, Twitter, etc:\n<a href=\"https://guide.meteor.com/accounts.html#supported-login-services\" target=\"_blank\" rel=\"external\">https://guide.meteor.com/accounts.html#supported-login-services</a></p>\n","excerpt":"","more":"<p>Oh, hello again, so Meteor has a very opinionated way on doing this stuff, and it offers very friendly and dead simple APIs for:</p>\n<ul>\n<li>Creating an user</li>\n<li>Login (Password, Facebook, Google, …)</li>\n<li>Forgot Password</li>\n<li>Change Password</li>\n<li>Reset Password</li>\n</ul>\n<p>In this episode we’ll focus more on using it with passwords, but we’ll also show you how easy it is to integrate it with other systems.</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>accounts-<span class=\"keyword\">base </span>accounts-password</div></pre></td></tr></table></figure>\n<p>Open your server-side shell and type:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Accounts</span><span class=\"selector-class\">.createUser</span>(&#123;</div><div class=\"line\">    <span class=\"attribute\">email</span>: <span class=\"string\">'donut@lover.com'</span>, </div><div class=\"line\">    password: <span class=\"string\">'12345'</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Users are stored in a collection. You can access this collection via <code>Meteor.users</code>. \nIt’s the same kind of collection that we learned about in the past chapters.</p>\n<p>Now go to your browser’s console:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.loginWithPassword(<span class=\"string\">'donut@lover.com'</span>, <span class=\"string\">'12345'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called because authentication was a success'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Bam! You’re logged in.</p>\n<figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in browser console:</span></div><div class=\"line\">Meteor.user<span class=\"comment\">()</span> <span class=\"comment\">// will return the current logged in user</span></div><div class=\"line\">Meteor.userId<span class=\"comment\">()</span> <span class=\"comment\">// will return the _id of the current logged in user</span></div></pre></td></tr></table></figure>\n<p><code>Meteor.user()</code> is a reactive data source, so if you use it in a Tracker, then you will benefit from it’s reactivity,\nmeaning you can show some stuff for logged in users, and hide for anonymous ones.</p>\n<p>Another thing you may notice is how <code>emails</code> key is structured:\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        address: 'donut@lover.com',</div><div class=\"line\">        verified: <span class=\"literal\">true</span>|<span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>This may seem a bit complicated, but they decided to stick with this, maybe because they wanted to satisfy easily the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Meteor</span><span class=\"selector-class\">.user</span>()<span class=\"selector-class\">.emails</span><span class=\"selector-attr\">[0]</span><span class=\"selector-class\">.address</span></div></pre></td></tr></table></figure></p>\n<p>But don’t worry about this now, when we’ll learn how to make this easy, so you won’t have to type this everywhere you need an user’s email.</p>\n<p>You think ‘12345’ is not a very secure password, and you are correct, let’s change it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.changePassword(<span class=\"string\">'12345'</span>, <span class=\"string\">'My1337L333Tpasswurt%'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Change password was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Very nice, now let’s try a logout:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.logout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Logout was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// now Meteor.user() and Meteor.userId() will be null</span></div></pre></td></tr></table></figure>\n<p>Next time you login, you’ll login with your new password.</p>\n<p>Btw, the callbacks we used in <code>loginWithPassword</code>, <code>changePassword</code> and <code>logout</code> are optional, you can simply not use it.</p>\n<p>But wait, your new password is so complex, you already forgot it.</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Accounts</span><span class=\"selector-class\">.forgotPassword</span>(&#123; <span class=\"attribute\">email</span>: <span class=\"string\">'donut@lover.com'</span> &#125;)</div></pre></td></tr></table></figure>\n<p>Now check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>//localhost:<span class=\"number\">3000</span>/<span class=\"meta\">#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7</span></div></pre></td></tr></table></figure></p>\n<p>The last part is your token.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.resetPassword(<span class=\"string\">'eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7'</span>, <span class=\"string\">'NewPassword123'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Password reset was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Bam!\nWhat if you want registration, but with mail confirmation ?</p>\n<p>Go to your meteor shell:\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">Accounts</span><span class=\"selector-class\">.createUser</span>(&#123;</div><div class=\"line\">    <span class=\"attribute\">email</span>: <span class=\"string\">'user@withoutPassword.com'</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// it returns the newly created _id</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-tag\">Accounts</span><span class=\"selector-class\">.sendEnrollmentEmail</span>(_id);</div></pre></td></tr></table></figure></p>\n<p>Now go to where you started meteor and check the email out.\nGet the token and set a new password using <code>Accounts.resetPassword()</code></p>\n<p>Emails are customizable:\n<a href=\"http://docs.meteor.com/api/passwords.html#Accounts-emailTemplates\">http://docs.meteor.com/api/passwords.html#Accounts-emailTemplates</a></p>\n<p>Read more about other cool stuff here:\n<a href=\"http://docs.meteor.com/api/passwords.html\">http://docs.meteor.com/api/passwords.html</a></p>\n<p>That’s a short intro into the account system. Isn’t it super-duper easy ?</p>\n<p>Login with Facebook, Google, Twitter, etc:\n<a href=\"https://guide.meteor.com/accounts.html#supported-login-services\">https://guide.meteor.com/accounts.html#supported-login-services</a></p>\n"},{"title":"Security","description":"Let's talk Security","_content":"\nSecurity is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We'll show you first how we can\nsecure our methods and publications, then you will be shown some tips and tricks to handle \nit for an evergrowing code base.\n\nSo, remember the methods ?\n\n```\nMeteor.methods({\n    'do_something': function () {\n        // in it you have access to this.userId\n        // which represents the logged in user\n        console.log(this.userId);\n    }\n})\n```\n\nSame thing in publications:\n\n```\nMeteor.publish('something', function () {\n    console.log(this.userId);\n    \n    return this.ready(); // \n})\n```\n\nBased on the userId you have the ability to check if he is logged in, maybe you have multiple roles in the system,\nthat you may store as an array at \"user document\" level, and you can check for that, the thing is, you can do anything you want.\n\nNow, how we recommend you do it:\n\nWe recommend installing the infamous package, [alanning:roles](https://atmospherejs.com/alanning/roles):\n\n```\nmeteor add alanning:roles\n```\n\nCentralize security in a component:\n\n```\n// file: /imports/api/security.js\nimport { Roles } from 'meteor/alanning:roles';\n\nexport default class Security {\n    static checkRole(userId, role) {\n        if (!this.hasRole(userId, role)) {\n            throw new Meteor.Error('not-authorized');\n        }\n    }\n\n    static currentUserHasRole(role) {\n        if (!Meteor.isClient) {\n            throw new Meteor.Error('not-allowed', 'This method is only available on the client');\n        }\n\n        return this.hasRole(Meteor.userId(), role);\n    }\n\n    static hasRole(userId, role) {\n        return Roles.userIsInRole(userId, role);\n    }\n\n    static checkLoggedIn(userId) {\n        if (!userId) {\n            throw new Meteor.Error('not-authorized', 'You are not authorized');\n        };\n    }\n    \n    // add other business logic checks here that you use throughout the app\n    // something like: isUserAllowedToSeeDocument()\n    // always keep decoupling your code if this class gets large.\n}\n```\n\nPretty straight forward right ? The reason we do it like this, the reason we centralize security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong,\ndepends on your use-case, but in my opinion I find out that it was easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!\n\nSimple usage in methods:\n\n```\nimport Security from '/imports/api/security.js';\n\nMeteor.methods({\n    'do_something': function () {\n        // throw exception if not logged it:\n        Security.checkLoggedIn(this.userId);\n        \n        // throw exception if not has role:\n        Security.checkRole(this.userId, 'ADMIN');\n        \n        // conditional return\n        if (Security.hasRole('ADMIN')) {\n            return sensitiveData;\n        } else {\n            return publicData;\n        }\n    }\n})\n```\n\nSimple usage in publications:\n\n```\nimport Security from '/imports/api/security.js';\n\nMeteor.publish('posts', function () {\n    let filters = {};\n    if (!Security.hasRole(this.userId, 'ADMIN')) {\n        // if the user is not an admin, we only show posts with \"isPublic\" true\n        filters.isPublic = true;\n    }\n    \n    return Posts.find(filters);\n})\n```\n\n\n\n","source":"chapters/1/security.md","raw":"---\ntitle: Security\ndescription: Let's talk Security\n---\n\nSecurity is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We'll show you first how we can\nsecure our methods and publications, then you will be shown some tips and tricks to handle \nit for an evergrowing code base.\n\nSo, remember the methods ?\n\n```\nMeteor.methods({\n    'do_something': function () {\n        // in it you have access to this.userId\n        // which represents the logged in user\n        console.log(this.userId);\n    }\n})\n```\n\nSame thing in publications:\n\n```\nMeteor.publish('something', function () {\n    console.log(this.userId);\n    \n    return this.ready(); // \n})\n```\n\nBased on the userId you have the ability to check if he is logged in, maybe you have multiple roles in the system,\nthat you may store as an array at \"user document\" level, and you can check for that, the thing is, you can do anything you want.\n\nNow, how we recommend you do it:\n\nWe recommend installing the infamous package, [alanning:roles](https://atmospherejs.com/alanning/roles):\n\n```\nmeteor add alanning:roles\n```\n\nCentralize security in a component:\n\n```\n// file: /imports/api/security.js\nimport { Roles } from 'meteor/alanning:roles';\n\nexport default class Security {\n    static checkRole(userId, role) {\n        if (!this.hasRole(userId, role)) {\n            throw new Meteor.Error('not-authorized');\n        }\n    }\n\n    static currentUserHasRole(role) {\n        if (!Meteor.isClient) {\n            throw new Meteor.Error('not-allowed', 'This method is only available on the client');\n        }\n\n        return this.hasRole(Meteor.userId(), role);\n    }\n\n    static hasRole(userId, role) {\n        return Roles.userIsInRole(userId, role);\n    }\n\n    static checkLoggedIn(userId) {\n        if (!userId) {\n            throw new Meteor.Error('not-authorized', 'You are not authorized');\n        };\n    }\n    \n    // add other business logic checks here that you use throughout the app\n    // something like: isUserAllowedToSeeDocument()\n    // always keep decoupling your code if this class gets large.\n}\n```\n\nPretty straight forward right ? The reason we do it like this, the reason we centralize security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong,\ndepends on your use-case, but in my opinion I find out that it was easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!\n\nSimple usage in methods:\n\n```\nimport Security from '/imports/api/security.js';\n\nMeteor.methods({\n    'do_something': function () {\n        // throw exception if not logged it:\n        Security.checkLoggedIn(this.userId);\n        \n        // throw exception if not has role:\n        Security.checkRole(this.userId, 'ADMIN');\n        \n        // conditional return\n        if (Security.hasRole('ADMIN')) {\n            return sensitiveData;\n        } else {\n            return publicData;\n        }\n    }\n})\n```\n\nSimple usage in publications:\n\n```\nimport Security from '/imports/api/security.js';\n\nMeteor.publish('posts', function () {\n    let filters = {};\n    if (!Security.hasRole(this.userId, 'ADMIN')) {\n        // if the user is not an admin, we only show posts with \"isPublic\" true\n        filters.isPublic = true;\n    }\n    \n    return Posts.find(filters);\n})\n```\n\n\n\n","date":"2016-10-31T04:34:05.682Z","updated":"2016-10-31T04:34:05.682Z","path":"chapters/1/security.html","_id":"ciuuujzzk00001gjxm98tz609","comments":1,"layout":"page","content":"<p>Security is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We’ll show you first how we can\nsecure our methods and publications, then you will be shown some tips and tricks to handle \nit for an evergrowing code base.</p>\n<p>So, remember the methods ?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'do_something'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// in it you have access to this.userId</span></div><div class=\"line\">        <span class=\"comment\">// which represents the logged in user</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Same thing in publications:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.publish(<span class=\"string\">'something'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ready(); <span class=\"comment\">// </span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Based on the userId you have the ability to check if he is logged in, maybe you have multiple roles in the system,\nthat you may store as an array at “user document” level, and you can check for that, the thing is, you can do anything you want.</p>\n<p>Now, how we recommend you do it:</p>\n<p>We recommend installing the infamous package, <a href=\"https://atmospherejs.com/alanning/roles\" target=\"_blank\" rel=\"external\">alanning:roles</a>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> alanning:roles</span></div></pre></td></tr></table></figure>\n<p>Centralize security in a component:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/security.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Roles &#125; from <span class=\"string\">'meteor/alanning:roles'</span>;</div><div class=\"line\"></div><div class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Security</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">checkRole</span><span class=\"params\">(userId, role)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasRole(userId, role)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">currentUserHasRole</span><span class=\"params\">(role)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Meteor.isClient) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>, <span class=\"string\">'This method is only available on the client'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.hasRole(Meteor.userId(), role);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">hasRole</span><span class=\"params\">(userId, role)</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">return</span> Roles.<span class=\"title\">userIsInRole</span><span class=\"params\">(userId, role)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">checkLoggedIn</span><span class=\"params\">(userId)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!userId) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>, <span class=\"string\">'You are not authorized'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// add other business logic checks here that you use throughout the app</span></div><div class=\"line\">    <span class=\"comment\">// something like: isUserAllowedToSeeDocument()</span></div><div class=\"line\">    <span class=\"comment\">// always keep decoupling your code if this class gets large.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Pretty straight forward right ? The reason we do it like this, the reason we centralize security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong,\ndepends on your use-case, but in my opinion I find out that it was easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!</p>\n<p>Simple usage in methods:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'do_something'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// throw exception if not logged it:</span></div><div class=\"line\">        Security.checkLoggedIn(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// throw exception if not has role:</span></div><div class=\"line\">        Security.checkRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// conditional return</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (Security.hasRole(<span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> sensitiveData;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> publicData;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Simple usage in publications:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> filters = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Security.hasRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">        <span class=\"comment\">// if the user is not an admin, we only show posts with \"isPublic\" true</span></div><div class=\"line\">        filters.isPublic = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> Posts.find(filters);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>Security is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We’ll show you first how we can\nsecure our methods and publications, then you will be shown some tips and tricks to handle \nit for an evergrowing code base.</p>\n<p>So, remember the methods ?</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'do_something'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// in it you have access to this.userId</span></div><div class=\"line\">        <span class=\"comment\">// which represents the logged in user</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Same thing in publications:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.publish(<span class=\"string\">'something'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.ready(); <span class=\"comment\">// </span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Based on the userId you have the ability to check if he is logged in, maybe you have multiple roles in the system,\nthat you may store as an array at “user document” level, and you can check for that, the thing is, you can do anything you want.</p>\n<p>Now, how we recommend you do it:</p>\n<p>We recommend installing the infamous package, <a href=\"https://atmospherejs.com/alanning/roles\">alanning:roles</a>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> alanning:roles</span></div></pre></td></tr></table></figure>\n<p>Centralize security in a component:</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/security.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Roles &#125; from <span class=\"string\">'meteor/alanning:roles'</span>;</div><div class=\"line\"></div><div class=\"line\">export <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Security</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">checkRole</span><span class=\"params\">(userId, role)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasRole(userId, role)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">currentUserHasRole</span><span class=\"params\">(role)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Meteor.isClient) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>, <span class=\"string\">'This method is only available on the client'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.hasRole(Meteor.userId(), role);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">hasRole</span><span class=\"params\">(userId, role)</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">return</span> Roles.<span class=\"title\">userIsInRole</span><span class=\"params\">(userId, role)</span></span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"title\">checkLoggedIn</span><span class=\"params\">(userId)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!userId) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>, <span class=\"string\">'You are not authorized'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// add other business logic checks here that you use throughout the app</span></div><div class=\"line\">    <span class=\"comment\">// something like: isUserAllowedToSeeDocument()</span></div><div class=\"line\">    <span class=\"comment\">// always keep decoupling your code if this class gets large.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Pretty straight forward right ? The reason we do it like this, the reason we centralize security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong,\ndepends on your use-case, but in my opinion I find out that it was easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!</p>\n<p>Simple usage in methods:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'do_something'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// throw exception if not logged it:</span></div><div class=\"line\">        Security.checkLoggedIn(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// throw exception if not has role:</span></div><div class=\"line\">        Security.checkRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// conditional return</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (Security.hasRole(<span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> sensitiveData;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> publicData;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Simple usage in publications:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> filters = &#123;&#125;;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Security.hasRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">        <span class=\"comment\">// if the user is not an admin, we only show posts with \"isPublic\" true</span></div><div class=\"line\">        filters.isPublic = <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> Posts.find(filters);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n"},{"title":"Meteor Snacks & Conclusions","description":"Some interesting tools that Meteor has to offer.","_content":"\n## Environment Variables\n\nMeteor uses these variables to know which MongoDB database should it connect to, how it should send emails, many more:\n\n- MONGO_URL : you don't have to have this by default, but if you connect to another database here where you would put it\n- MAIL_URL : the smtp:// to your email, we'll show you in a bit how easy it is to set it up.\n- METEOR_PROFILE : if set to 1, you'll see how much time meteor spends on the building/rebuilding process\n- ROOT_URL : the real path of Meteor, default is http://localhost:3000\n\nTo specify these variables you would do:\n\n```\nROOT_URL=\"http://localhost:3000\" MAIL_URL=\"smtp://gmail.com:25\" meteor run\n```\n\n\n## Meteor.wrapAsync\n\nYou will use this to be able to do async operations in your methods. Let's say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. Well if you do something like \n \n```\nMeteor.methods({\n    'something_async': function () {\n        coolLibrary.coolFunction(function (err, res) {\n            // gets here after some time.\n        })\n    }\n})\n```\n\nYou may have a very weird error saying that code cannot run outside \"Fibers\". Don't want to get into details on that, but here's how you would do it:\n\n```\nMeteor.methods({\n    'something_async': function () {\n        const run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);\n        // the second argument is to provide context to the function, bc if that function uses \"this\" inside it, then it will fail without the context specified.\n        \n        try {\n            const results = run(); \n            // if the callback accepts err then res (standard), then result will be put in sync into results.\n        } catch (e) {\n            // if an exception occurs, that exception will be caught here\n        }\n        \n        // some API's will not have callbacks with (err, res), but instead give you other arguments with other order\n        // for those edge-cases you may need to use the same \"async\" like syntax:\n        \n        const results = run((arguments, of, the, callback) => {\n            // do something here, this time you are inside a fiber, so it will not crash!\n        })\n        \n        return results;\n    }\n})\n```\n\n## Timers\n\nYou may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:\n\n```\nMeteor.methods({\n    'something_async': function () {\n        Meteor.setInterval(() => {\n            console.log('tick');\n        }, 1000);\n    }\n})\n```\n\nAfter you have called the method, you will get a 'tick' in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!\n\n## Email\n\nRemember the emails we received in console when we were talking about Users ? Well, in the back, they used this module:\nIf you don't specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?\n\n```\n// Most Basic Usage\nimport { Email } from 'meteor/email';\n\nEmail.send({\n  to: 'you@meteor-tuts.com',\n  from: 'no-reply@meteor-tuts.com',\n  subject: \"I'm an email\",\n  html: '<p>Hello!</p>'\n});\n```\n\nRead more: http://docs.meteor.com/api/email.html\n\n## Meteor.defer\n\nSometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:\n\n```\nMeteor.methods({\n    'action_plus_email': function () {\n        // do something\n        \n        Meteor.defer(() => {\n            Email.send(...)\n        })\n        \n        return 'hello there, user';\n    }\n})\n```\n\nMeteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a \"background\" job in a fiber.\n\n## HTTP\n\nWant to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.\n\nhttp://docs.meteor.com/api/http.html\n\n```\nMeteor.methods({\n    'an_api_call': function () {\n        const data = HTTP.get('https://jsonplaceholder.typicode.com/posts/1')\n        \n        console.log(data);\n        \n        return data;\n    }\n})\n\n```\n\n## Assets\n\nhttp://docs.meteor.com/api/assets.html\n\nGo ahead, put something in \"/private/some_folder/test.txt\":\n\n```\n// meteor shell\nAssets.getText('/some_folder/test.txt')\n```\n\nYou would use this when for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can use privately on the server.\n","source":"chapters/1/meteorSnacks.md","raw":"---\ntitle: Meteor Snacks & Conclusions\ndescription: Some interesting tools that Meteor has to offer.\n---\n\n## Environment Variables\n\nMeteor uses these variables to know which MongoDB database should it connect to, how it should send emails, many more:\n\n- MONGO_URL : you don't have to have this by default, but if you connect to another database here where you would put it\n- MAIL_URL : the smtp:// to your email, we'll show you in a bit how easy it is to set it up.\n- METEOR_PROFILE : if set to 1, you'll see how much time meteor spends on the building/rebuilding process\n- ROOT_URL : the real path of Meteor, default is http://localhost:3000\n\nTo specify these variables you would do:\n\n```\nROOT_URL=\"http://localhost:3000\" MAIL_URL=\"smtp://gmail.com:25\" meteor run\n```\n\n\n## Meteor.wrapAsync\n\nYou will use this to be able to do async operations in your methods. Let's say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. Well if you do something like \n \n```\nMeteor.methods({\n    'something_async': function () {\n        coolLibrary.coolFunction(function (err, res) {\n            // gets here after some time.\n        })\n    }\n})\n```\n\nYou may have a very weird error saying that code cannot run outside \"Fibers\". Don't want to get into details on that, but here's how you would do it:\n\n```\nMeteor.methods({\n    'something_async': function () {\n        const run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);\n        // the second argument is to provide context to the function, bc if that function uses \"this\" inside it, then it will fail without the context specified.\n        \n        try {\n            const results = run(); \n            // if the callback accepts err then res (standard), then result will be put in sync into results.\n        } catch (e) {\n            // if an exception occurs, that exception will be caught here\n        }\n        \n        // some API's will not have callbacks with (err, res), but instead give you other arguments with other order\n        // for those edge-cases you may need to use the same \"async\" like syntax:\n        \n        const results = run((arguments, of, the, callback) => {\n            // do something here, this time you are inside a fiber, so it will not crash!\n        })\n        \n        return results;\n    }\n})\n```\n\n## Timers\n\nYou may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:\n\n```\nMeteor.methods({\n    'something_async': function () {\n        Meteor.setInterval(() => {\n            console.log('tick');\n        }, 1000);\n    }\n})\n```\n\nAfter you have called the method, you will get a 'tick' in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!\n\n## Email\n\nRemember the emails we received in console when we were talking about Users ? Well, in the back, they used this module:\nIf you don't specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?\n\n```\n// Most Basic Usage\nimport { Email } from 'meteor/email';\n\nEmail.send({\n  to: 'you@meteor-tuts.com',\n  from: 'no-reply@meteor-tuts.com',\n  subject: \"I'm an email\",\n  html: '<p>Hello!</p>'\n});\n```\n\nRead more: http://docs.meteor.com/api/email.html\n\n## Meteor.defer\n\nSometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:\n\n```\nMeteor.methods({\n    'action_plus_email': function () {\n        // do something\n        \n        Meteor.defer(() => {\n            Email.send(...)\n        })\n        \n        return 'hello there, user';\n    }\n})\n```\n\nMeteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a \"background\" job in a fiber.\n\n## HTTP\n\nWant to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.\n\nhttp://docs.meteor.com/api/http.html\n\n```\nMeteor.methods({\n    'an_api_call': function () {\n        const data = HTTP.get('https://jsonplaceholder.typicode.com/posts/1')\n        \n        console.log(data);\n        \n        return data;\n    }\n})\n\n```\n\n## Assets\n\nhttp://docs.meteor.com/api/assets.html\n\nGo ahead, put something in \"/private/some_folder/test.txt\":\n\n```\n// meteor shell\nAssets.getText('/some_folder/test.txt')\n```\n\nYou would use this when for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can use privately on the server.\n","date":"2016-10-31T04:41:00.508Z","updated":"2016-10-31T04:41:00.508Z","path":"chapters/1/meteorSnacks.html","_id":"ciuuvhqrw0000a0jx8hoyytyy","comments":1,"layout":"page","content":"<h2 id=\"Environment-Variables\"><a href=\"#Environment-Variables\" class=\"headerlink\" title=\"Environment Variables\"></a>Environment Variables</h2><p>Meteor uses these variables to know which MongoDB database should it connect to, how it should send emails, many more:</p>\n<ul>\n<li>MONGO_URL : you don’t have to have this by default, but if you connect to another database here where you would put it</li>\n<li>MAIL_URL : the smtp:// to your email, we’ll show you in a bit how easy it is to set it up.</li>\n<li>METEOR_PROFILE : if set to 1, you’ll see how much time meteor spends on the building/rebuilding process</li>\n<li>ROOT_URL : the real path of Meteor, default is <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"external\">http://localhost:3000</a></li>\n</ul>\n<p>To specify these variables you would do:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROOT_URL=<span class=\"string\">\"http://localhost:3000\"</span> MAIL_URL=<span class=\"string\">\"smtp://gmail.com:25\"</span> meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n<h2 id=\"Meteor-wrapAsync\"><a href=\"#Meteor-wrapAsync\" class=\"headerlink\" title=\"Meteor.wrapAsync\"></a>Meteor.wrapAsync</h2><p>You will use this to be able to do async operations in your methods. Let’s say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. Well if you do something like </p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        coolLibrary.coolFunction(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, res)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// gets here after some time.</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You may have a very weird error saying that code cannot run outside “Fibers”. Don’t want to get into details on that, but here’s how you would do it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);</div><div class=\"line\">        <span class=\"comment\">// the second argument is to provide context to the function, bc if that function uses \"this\" inside it, then it will fail without the context specified.</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> results = run(); </div><div class=\"line\">            <span class=\"comment\">// if the callback accepts err then res (standard), then result will be put in sync into results.</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            <span class=\"comment\">// if an exception occurs, that exception will be caught here</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// some API's will not have callbacks with (err, res), but instead give you other arguments with other order</span></div><div class=\"line\">        <span class=\"comment\">// for those edge-cases you may need to use the same \"async\" like syntax:</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> results = run(<span class=\"function\">(<span class=\"params\"><span class=\"built_in\">arguments</span>, <span class=\"keyword\">of</span>, the, callback</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// do something here, this time you are inside a fiber, so it will not crash!</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> results;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h2><p>You may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Meteor.setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'tick'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>After you have called the method, you will get a ‘tick’ in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!</p>\n<h2 id=\"Email\"><a href=\"#Email\" class=\"headerlink\" title=\"Email\"></a>Email</h2><p>Remember the emails we received in console when we were talking about Users ? Well, in the back, they used this module:\nIf you don’t specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Most Basic Usage</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Email &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/email'</span>;</div><div class=\"line\"></div><div class=\"line\">Email.send(&#123;</div><div class=\"line\">  to: <span class=\"string\">'you@meteor-tuts.com'</span>,</div><div class=\"line\">  <span class=\"keyword\">from</span>: <span class=\"string\">'no-reply@meteor-tuts.com'</span>,</div><div class=\"line\">  subject: <span class=\"string\">\"I'm an email\"</span>,</div><div class=\"line\">  html: <span class=\"string\">'&lt;p&gt;Hello!&lt;/p&gt;'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Read more: <a href=\"http://docs.meteor.com/api/email.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/email.html</a></p>\n<h2 id=\"Meteor-defer\"><a href=\"#Meteor-defer\" class=\"headerlink\" title=\"Meteor.defer\"></a>Meteor.defer</h2><p>Sometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'action_plus_email'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">        </div><div class=\"line\">        Meteor.defer(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(...)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'hello there, user'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Meteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a “background” job in a fiber.</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>Want to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.</p>\n<p><a href=\"http://docs.meteor.com/api/http.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/http.html</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'an_api_call'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> data = HTTP.get(<span class=\"string\">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Assets\"><a href=\"#Assets\" class=\"headerlink\" title=\"Assets\"></a>Assets</h2><p><a href=\"http://docs.meteor.com/api/assets.html\" target=\"_blank\" rel=\"external\">http://docs.meteor.com/api/assets.html</a></p>\n<p>Go ahead, put something in “/private/some_folder/test.txt”:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// meteor shell</span></div><div class=\"line\">Assets.<span class=\"keyword\">getText</span>(<span class=\"string\">'/some_folder/test.txt'</span>)</div></pre></td></tr></table></figure>\n<p>You would use this when for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can use privately on the server.</p>\n","excerpt":"","more":"<h2 id=\"Environment-Variables\"><a href=\"#Environment-Variables\" class=\"headerlink\" title=\"Environment Variables\"></a>Environment Variables</h2><p>Meteor uses these variables to know which MongoDB database should it connect to, how it should send emails, many more:</p>\n<ul>\n<li>MONGO_URL : you don’t have to have this by default, but if you connect to another database here where you would put it</li>\n<li>MAIL_URL : the smtp:// to your email, we’ll show you in a bit how easy it is to set it up.</li>\n<li>METEOR_PROFILE : if set to 1, you’ll see how much time meteor spends on the building/rebuilding process</li>\n<li>ROOT_URL : the real path of Meteor, default is <a href=\"http://localhost:3000\">http://localhost:3000</a></li>\n</ul>\n<p>To specify these variables you would do:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROOT_URL=<span class=\"string\">\"http://localhost:3000\"</span> MAIL_URL=<span class=\"string\">\"smtp://gmail.com:25\"</span> meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n<h2 id=\"Meteor-wrapAsync\"><a href=\"#Meteor-wrapAsync\" class=\"headerlink\" title=\"Meteor.wrapAsync\"></a>Meteor.wrapAsync</h2><p>You will use this to be able to do async operations in your methods. Let’s say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. Well if you do something like </p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        coolLibrary.coolFunction(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">(err, res)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// gets here after some time.</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You may have a very weird error saying that code cannot run outside “Fibers”. Don’t want to get into details on that, but here’s how you would do it:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);</div><div class=\"line\">        <span class=\"comment\">// the second argument is to provide context to the function, bc if that function uses \"this\" inside it, then it will fail without the context specified.</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> results = run(); </div><div class=\"line\">            <span class=\"comment\">// if the callback accepts err then res (standard), then result will be put in sync into results.</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            <span class=\"comment\">// if an exception occurs, that exception will be caught here</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"comment\">// some API's will not have callbacks with (err, res), but instead give you other arguments with other order</span></div><div class=\"line\">        <span class=\"comment\">// for those edge-cases you may need to use the same \"async\" like syntax:</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> results = run(<span class=\"function\">(<span class=\"params\"><span class=\"built_in\">arguments</span>, <span class=\"keyword\">of</span>, the, callback</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// do something here, this time you are inside a fiber, so it will not crash!</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> results;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h2><p>You may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        Meteor.setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'tick'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>After you have called the method, you will get a ‘tick’ in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!</p>\n<h2 id=\"Email\"><a href=\"#Email\" class=\"headerlink\" title=\"Email\"></a>Email</h2><p>Remember the emails we received in console when we were talking about Users ? Well, in the back, they used this module:\nIf you don’t specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Most Basic Usage</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Email &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/email'</span>;</div><div class=\"line\"></div><div class=\"line\">Email.send(&#123;</div><div class=\"line\">  to: <span class=\"string\">'you@meteor-tuts.com'</span>,</div><div class=\"line\">  <span class=\"keyword\">from</span>: <span class=\"string\">'no-reply@meteor-tuts.com'</span>,</div><div class=\"line\">  subject: <span class=\"string\">\"I'm an email\"</span>,</div><div class=\"line\">  html: <span class=\"string\">'&lt;p&gt;Hello!&lt;/p&gt;'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Read more: <a href=\"http://docs.meteor.com/api/email.html\">http://docs.meteor.com/api/email.html</a></p>\n<h2 id=\"Meteor-defer\"><a href=\"#Meteor-defer\" class=\"headerlink\" title=\"Meteor.defer\"></a>Meteor.defer</h2><p>Sometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'action_plus_email'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">        </div><div class=\"line\">        Meteor.defer(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(...)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'hello there, user'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Meteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a “background” job in a fiber.</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>Want to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.</p>\n<p><a href=\"http://docs.meteor.com/api/http.html\">http://docs.meteor.com/api/http.html</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'an_api_call'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> data = HTTP.get(<span class=\"string\">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Assets\"><a href=\"#Assets\" class=\"headerlink\" title=\"Assets\"></a>Assets</h2><p><a href=\"http://docs.meteor.com/api/assets.html\">http://docs.meteor.com/api/assets.html</a></p>\n<p>Go ahead, put something in “/private/some_folder/test.txt”:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// meteor shell</span></div><div class=\"line\">Assets.<span class=\"keyword\">getText</span>(<span class=\"string\">'/some_folder/test.txt'</span>)</div></pre></td></tr></table></figure>\n<p>You would use this when for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can use privately on the server.</p>\n"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}